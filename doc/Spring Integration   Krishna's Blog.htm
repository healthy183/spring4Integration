<!DOCTYPE html>
<!-- saved from url=(0048)https://krishnasblog.com/tag/spring-integration/ -->
<html lang="en"><!--<![endif]--><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width">
<title>Spring Integration | Krishna's Blog</title>
<link rel="profile" href="http://gmpg.org/xfn/11">
<link rel="pingback" href="https://krishnasblog.com/xmlrpc.php">
<!--[if lt IE 9]>
<script src="https://s0.wp.com/wp-content/themes/pub/twentytwelve/js/html5.js" type="text/javascript"></script>
<![endif]-->
<meta name="google-site-verification" content="wtghneBQea7x536DDeLylWHa9k4L-w1B294DA2V3Teo">
<meta name="msvalidate.01" content="2E31FC60C07BDBAA9298F51002D1FF87">
<meta name="p:domain_verify" content="106445155a9cf13fbe1206e2b4bf8c8c">
		<script src="./Spring Integration   Krishna's Blog_files/remote-login.php" type="text/javascript"></script>
		<script type="text/javascript">
		/* <![CDATA[ */
			if ( 'function' === typeof WPRemoteLogin ) {
				document.cookie = "wordpress_test_cookie=test; path=/";
				if ( document.cookie.match( /(;|^)\s*wordpress_test_cookie\=/ ) ) {
					WPRemoteLogin();
				}
			}
		/* ]]> */
		</script>
		<link rel="alternate" type="application/rss+xml" title="Krishna&#39;s Blog » Feed" href="https://krishnasblog.com/feed/">
<link rel="alternate" type="application/rss+xml" title="Krishna&#39;s Blog » Comments Feed" href="https://krishnasblog.com/comments/feed/">
<link rel="alternate" type="application/rss+xml" title="Krishna&#39;s Blog » Spring Integration Tag Feed" href="https://krishnasblog.com/tag/spring-integration/feed/">
	<script type="text/javascript">
		/* <![CDATA[ */
		function addLoadEvent(func) {
			var oldonload = window.onload;
			if (typeof window.onload != 'function') {
				window.onload = func;
			} else {
				window.onload = function () {
					oldonload();
					func();
				}
			}
		}
		/* ]]> */
	</script>
	<link rel="stylesheet" id="all-css-0" href="./Spring Integration   Krishna's Blog_files/saved_resource" type="text/css" media="all">
<link rel="stylesheet" id="twentytwelve-fonts-css" href="./Spring Integration   Krishna's Blog_files/css" type="text/css" media="all">
<link rel="stylesheet" id="all-css-2" href="./Spring Integration   Krishna's Blog_files/style.css" type="text/css" media="all">
<!--[if lt IE 9]>
<link rel='stylesheet' id='twentytwelve-ie-css'  href='https://s0.wp.com/wp-content/themes/pub/twentytwelve/css/ie.css?m=1423935238g&#038;ver=20121010' type='text/css' media='all' />
<![endif]-->
<link rel="stylesheet" id="all-css-4" href="./Spring Integration   Krishna's Blog_files/saved_resource(1)" type="text/css" media="all">
<script type="text/javascript">
/* <![CDATA[ */
var LoggedOutFollow = {"invalid_email":"Your subscription did not succeed, please try again with a valid email address."};
/* ]]> */
</script>
<script type="text/javascript" src="./Spring Integration   Krishna's Blog_files/saved_resource(2)"></script><style type="text/css"></style>
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="https://krishnasblog1068.wordpress.com/xmlrpc.php?rsd">
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="https://s1.wp.com/wp-includes/wlwmanifest.xml"> 
<meta name="generator" content="WordPress.com">
<link rel="shortcut icon" type="image/x-icon" href="https://s2.wp.com/i/favicon.ico" sizes="16x16 24x24 32x32 48x48">
<link rel="icon" type="image/x-icon" href="https://s2.wp.com/i/favicon.ico" sizes="16x16 24x24 32x32 48x48">
<link rel="apple-touch-icon-precomposed" href="https://s0.wp.com/i/webclip.png">
<link rel="openid.server" href="https://krishnasblog1068.wordpress.com/?openidserver=1">
<link rel="openid.delegate" href="https://krishnasblog1068.wordpress.com/">
<link rel="search" type="application/opensearchdescription+xml" href="https://krishnasblog.com/osd.xml" title="Krishna&#39;s Blog">
<link rel="search" type="application/opensearchdescription+xml" href="https://s1.wp.com/opensearch.xml" title="WordPress.com">
<meta name="application-name" content="Krishna&#39;s Blog"><meta name="msapplication-window" content="width=device-width;height=device-height"><meta name="msapplication-tooltip" content="Rumblings by a Java guy on Java, Clojure, Scala and Groovy"><meta name="msapplication-task" content="name=Subscribe;action-uri=https://krishnasblog.com/feed/;icon-uri=https://s2.wp.com/i/favicon.ico"><meta name="msapplication-task" content="name=Sign up for a free blog;action-uri=http://wordpress.com/signup/;icon-uri=https://s2.wp.com/i/favicon.ico"><meta name="msapplication-task" content="name=WordPress.com Support;action-uri=http://support.wordpress.com/;icon-uri=https://s2.wp.com/i/favicon.ico"><meta name="msapplication-task" content="name=WordPress.com Forums;action-uri=http://forums.wordpress.com/;icon-uri=https://s2.wp.com/i/favicon.ico"><meta name="title" content="Posts about Spring Integration on Krishna&#39;s Blog">
<meta name="description" content="Posts about Spring Integration written by Krishna">
<link rel="stylesheet" type="text/css" href="./Spring Integration   Krishna's Blog_files/shCore.css"><link rel="stylesheet" type="text/css" href="./Spring Integration   Krishna's Blog_files/shThemeDefault.css"><style type="text/css" id="syntaxhighlighteranchor"></style>
<link rel="stylesheet" type="text/css" id="gravatar-card-css" href="./Spring Integration   Krishna's Blog_files/hovercard.css"><link rel="stylesheet" type="text/css" id="gravatar-card-services-css" href="./Spring Integration   Krishna's Blog_files/services.css"></head>

<body class="archive tag tag-spring-integration tag-5915024 mp6 customizer-styles-applied custom-font-enabled highlander-enabled highlander-light infinite-scroll neverending infinity-success">
<div id="page" class="hfeed site">
	<header id="masthead" class="site-header" role="banner">
				<hgroup>
			<h1 class="site-title"><a href="https://krishnasblog.com/" title="Krishna&#39;s Blog" rel="home">Krishna's Blog</a></h1>
			<h2 class="site-description">Rumblings by a Java guy on Java, Clojure, Scala and Groovy</h2>
		</hgroup>

		<nav id="site-navigation" class="main-navigation" role="navigation">
			<button class="menu-toggle">Menu</button>
			<a class="assistive-text" href="https://krishnasblog.com/tag/spring-integration/#content" title="Skip to content">Skip to content</a>
			<div class="nav-menu"><ul><li><a href="https://krishnasblog.com/">Home</a></li><li class="page_item page-item-2272"><a href="https://krishnasblog.com/quick-charts/"></a><a href="http://evening-plains-8221.herokuapp.com/">Quick Charts</a></li><li class="page_item page-item-2"><a href="https://krishnasblog.com/about/">About me</a></li></ul></div>
		</nav><!-- #site-navigation -->

			</header><!-- #masthead -->

	<div id="main" class="wrapper">
	<section id="primary" class="site-content">
		<div id="content" role="main">

					<header class="archive-header">
				<h1 class="archive-title">Tag Archives: <span>Spring Integration</span></h1>

						</header><!-- .archive-header -->

			
	<article id="post-1650" class="post-1650 post type-post status-publish format-standard hentry category-spring-integration tag-spring-integration">
				<header class="entry-header">
			
						<h1 class="entry-title">
				<a href="https://krishnasblog.com/2013/01/16/doing-https-communication-with-httpoutbound-gateway/" rel="bookmark">Doing HTTPS communication with http:outbound-gateway</a>
			</h1>
										<div class="comments-link">
					<a href="https://krishnasblog.com/2013/01/16/doing-https-communication-with-httpoutbound-gateway/#comments">10 Replies</a>				</div><!-- .comments-link -->
					</header><!-- .entry-header -->

				<div class="entry-content">
			<p>In Spring Integration when using http:outbound-gateway if you have to do https communication, you need to do the following trick,</p>
<div><div id="highlighter_195629" class="syntaxhighlighter  xml"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="xml plain">&lt;</code><code class="xml keyword">int-http:outbound-gateway</code> <code class="xml color1">id</code><code class="xml plain">=</code><code class="xml string">"my.outbound.gateway"</code></div><div class="line number2 index1 alt1"><code class="xml color1">request-channel</code><code class="xml plain">=</code><code class="xml string">"request-channel"</code> <code class="xml color1">reply-channel</code><code class="xml plain">=</code><code class="xml string">"reply-channel"</code></div><div class="line number3 index2 alt2"><code class="xml color1">url</code><code class="xml plain">=</code><code class="xml string">"<a href="https://localhost:8443/myservice/myService">https://localhost:8443/myservice/myService</a>"</code></div><div class="line number4 index3 alt1"><code class="xml color1">http-method</code><code class="xml plain">=</code><code class="xml string">"POST"</code></div><div class="line number5 index4 alt2"><code class="xml color1">expected-response-type</code><code class="xml plain">=</code><code class="xml string">"java.lang.String"</code><code class="xml plain">&gt;</code></div><div class="line number6 index5 alt1"><code class="xml plain">&lt;/</code><code class="xml keyword">int-http:outbound-gateway</code><code class="xml plain">&gt;</code></div></div></td></tr></tbody></table></div></div>
<p>Now you need to pass the keystore and trust store of the client and server as follows,</p>
<div><div id="highlighter_690307" class="syntaxhighlighter  plain"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="plain plain">&lt;bean id="trustStore"&gt;</code></div><div class="line number2 index1 alt1"><code class="plain plain">&lt;property name="targetObject" value="#{@systemProperties}" /&gt;</code></div><div class="line number3 index2 alt2"><code class="plain plain">&lt;property name="targetMethod" value="putAll" /&gt;</code></div><div class="line number4 index3 alt1"><code class="plain plain">&lt;property name="arguments"&gt;</code></div><div class="line number5 index4 alt2"><code class="plain plain">&lt;props&gt;</code></div><div class="line number6 index5 alt1"><code class="plain plain">&lt;prop key="javax.net.ssl.trustStore"&gt;&lt;jks key location&gt;&lt;/prop&gt;</code></div><div class="line number7 index6 alt2"><code class="plain plain">&lt;prop key="javax.net.ssl.keyStorePassword"&gt;password&lt;/prop&gt;</code></div><div class="line number8 index7 alt1"><code class="plain plain">&lt;/props&gt;</code></div><div class="line number9 index8 alt2"><code class="plain plain">&lt;/property&gt;</code></div><div class="line number10 index9 alt1"><code class="plain plain">&lt;/bean&gt;</code></div><div class="line number11 index10 alt2">&nbsp;</div><div class="line number12 index11 alt1"><code class="plain plain">&lt;bean id="keystore"&gt;</code></div><div class="line number13 index12 alt2"><code class="plain plain">&lt;property name="targetObject" value="#{@systemProperties}" /&gt;</code></div><div class="line number14 index13 alt1"><code class="plain plain">&lt;property name="targetMethod" value="putAll" /&gt;</code></div><div class="line number15 index14 alt2"><code class="plain plain">&lt;property name="arguments"&gt;</code></div><div class="line number16 index15 alt1"><code class="plain plain">&lt;props&gt;</code></div><div class="line number17 index16 alt2"><code class="plain plain">&lt;prop key="javax.net.ssl.keyStore"&gt;&lt;jks key location&gt;&lt;/prop&gt;</code></div><div class="line number18 index17 alt1"><code class="plain plain">&lt;prop key="javax.net.ssl.keyStorePassword"&gt;password&lt;/prop&gt;</code></div><div class="line number19 index18 alt2"><code class="plain plain">&lt;/props&gt;</code></div><div class="line number20 index19 alt1"><code class="plain plain">&lt;/property&gt;</code></div><div class="line number21 index20 alt2"><code class="plain plain">&lt;/bean&gt;</code></div></div></td></tr></tbody></table></div></div>
<p>There is also another way as mentioned in this article @ <a href="http://forum.springsource.org/showthread.php?115198-HTTPS-in-http-outbound-gateway" rel="nofollow">http://forum.springsource.org/showthread.php?115198-HTTPS-in-http-outbound-gateway</a></p>
<p>I hope this blog helped you.</p>
					</div><!-- .entry-content -->
		
		<footer class="entry-meta">
			This entry was posted in <a href="https://krishnasblog.com/category/java/spring/spring-integration/" rel="category tag">Spring Integration</a> and tagged <a href="./Spring Integration   Krishna's Blog_files/Spring Integration   Krishna's Blog.htm" rel="tag">Spring Integration</a> on <a href="https://krishnasblog.com/2013/01/16/doing-https-communication-with-httpoutbound-gateway/" title="12:39 am" rel="bookmark"><time class="entry-date" datetime="2013-01-16T00:39:03+00:00">January 16, 2013</time></a><span class="by-author"> by <span class="author vcard"><a class="url fn n" href="https://krishnasblog.com/author/praskrishna/" title="View all posts by Krishna" rel="author">Krishna</a></span></span>.								</footer><!-- .entry-meta -->
	</article><!-- #post -->

	<article id="post-1561" class="post-1561 post type-post status-publish format-standard hentry category-spring-integration tag-spring-integration">
				<header class="entry-header">
			
						<h1 class="entry-title">
				<a href="https://krishnasblog.com/2012/12/11/spring-integration-fakeftpserver-example/" rel="bookmark">Spring Integration FakeFtpServer&nbsp;example</a>
			</h1>
										<div class="comments-link">
					<a href="https://krishnasblog.com/2012/12/11/spring-integration-fakeftpserver-example/#comments">3 Replies</a>				</div><!-- .comments-link -->
					</header><!-- .entry-header -->

				<div class="entry-content">
			<p><a style="display:none;" href="http://www.codeproject.com/script/Articles/BlogFeedList.aspx?amid=skprasadu" rel="tag">CodeProject</a></p>
<p>For people in hurry, <a title="JUnit testing with FakeFtpServer with Spring Integration" href="https://github.com/skprasadu/junit-testing-ftpflow-in-spring-integration">get the latest code and the steps in GitHub</a>.</p>
<p>To run the junit test, run “mvn test” and understand the test flow.</p>
<h2>Introduction: FakeFtpServer</h2>
<p>In this Spring Integration FakeFtpServer example, I will demonstrate using Spring FakeFtpServer to JUnit test a <strong>Spring Integration</strong> flow. This is a interesting topic, there are few articles like <a title="Unit testing file transfers" href="http://erikwramner.wordpress.com/2012/03/24/unit-testing-file-transfers/">Unit testing file&nbsp;transfers</a>, which gives some insight on this topic.</p>
<p>In this blog, we will test a <em>Spring Integration</em> flow which checks for a list of files, apply a splitter to separate each file and start downloading them into local location, once the download is complete, it will delete the files on the FTP server. In my next blog, I will show how to do JUnit testing of Spring Integration flow with SFTP Server.</p>
<h2>Spring Integration flow</h2>
<div data-shortcode="caption" id="attachment_1556" style="width: 635px" class="wp-caption alignnone"><a href="https://krishnasblog1068.files.wordpress.com/2012/12/mockftp-spring-flow.png"><img class="size-full wp-image-1556" alt="Spring Integration FakeFtpServer example" src="./Spring Integration   Krishna's Blog_files/mockftp-spring-flow.png" width="625" height="151"></a><p class="wp-caption-text">Spring Integration FakeFtpServer example</p></div>
<p>In order to use FakeFtpServer we need to have Maven dependency as below,</p>
<div><div id="highlighter_406259" class="syntaxhighlighter  xml"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="xml plain">&lt;</code><code class="xml keyword">dependency</code><code class="xml plain">&gt;</code></div><div class="line number2 index1 alt1"><code class="xml plain">&lt;</code><code class="xml keyword">groupId</code><code class="xml plain">&gt;org.mockftpserver&lt;/</code><code class="xml keyword">groupId</code><code class="xml plain">&gt;</code></div><div class="line number3 index2 alt2"><code class="xml plain">&lt;</code><code class="xml keyword">artifactId</code><code class="xml plain">&gt;MockFtpServer&lt;/</code><code class="xml keyword">artifactId</code><code class="xml plain">&gt;</code></div><div class="line number4 index3 alt1"><code class="xml plain">&lt;</code><code class="xml keyword">version</code><code class="xml plain">&gt;2.3&lt;/</code><code class="xml keyword">version</code><code class="xml plain">&gt;</code></div><div class="line number5 index4 alt2"><code class="xml plain">&lt;</code><code class="xml keyword">scope</code><code class="xml plain">&gt;test&lt;/</code><code class="xml keyword">scope</code><code class="xml plain">&gt;</code></div><div class="line number6 index5 alt1"><code class="xml plain">&lt;/</code><code class="xml keyword">dependency</code><code class="xml plain">&gt;</code></div></div></td></tr></tbody></table></div></div>
<p>The first step to this is to create a FakeFtpServer before every test runs as below,</p>
<div><div id="highlighter_651701" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java color1">@Before</code></div><div class="line number2 index1 alt1"><code class="java keyword">public</code> <code class="java keyword">void</code> <code class="java plain">setUp() </code><code class="java keyword">throws</code> <code class="java plain">Exception {</code></div><div class="line number3 index2 alt2"><code class="java plain">fakeFtpServer = </code><code class="java keyword">new</code> <code class="java plain">FakeFtpServer();</code></div><div class="line number4 index3 alt1"><code class="java plain">fakeFtpServer.setServerControlPort(</code><code class="java value">9999</code><code class="java plain">); </code><code class="java comments">// use any free port</code></div><div class="line number5 index4 alt2"><code class="java plain">FileSystem fileSystem = </code><code class="java keyword">new</code> <code class="java plain">UnixFakeFileSystem();</code></div><div class="line number6 index5 alt1"><code class="java plain">fileSystem.add(</code><code class="java keyword">new</code> <code class="java plain">FileEntry(FILE, CONTENTS));</code></div><div class="line number7 index6 alt2"><code class="java plain">fakeFtpServer.setFileSystem(fileSystem);</code></div><div class="line number8 index7 alt1"><code class="java plain">UserAccount userAccount = </code><code class="java keyword">new</code> <code class="java plain">UserAccount(</code><code class="java string">"user"</code><code class="java plain">, </code><code class="java string">"password"</code><code class="java plain">, HOME_DIR);</code></div><div class="line number9 index8 alt2"><code class="java plain">fakeFtpServer.addUserAccount(userAccount);</code></div><div class="line number10 index9 alt1"><code class="java plain">fakeFtpServer.start();</code></div><div class="line number11 index10 alt2"><code class="java plain">}</code></div><div class="line number12 index11 alt1">&nbsp;</div><div class="line number13 index12 alt2"><code class="java color1">@After</code></div><div class="line number14 index13 alt1"><code class="java keyword">public</code> <code class="java keyword">void</code> <code class="java plain">tearDown() </code><code class="java keyword">throws</code> <code class="java plain">Exception {</code></div><div class="line number15 index14 alt2"><code class="java plain">fakeFtpServer.stop();</code></div><div class="line number16 index15 alt1"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div>
<p>Finally run the JUnit test case as below,</p>
<div><div id="highlighter_343544" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java color1">@Autowired</code></div><div class="line number2 index1 alt1"><code class="java keyword">private</code> <code class="java plain">FileDownloadUtil downloadUtil;</code></div><div class="line number3 index2 alt2"><code class="java color1">@Test</code></div><div class="line number4 index3 alt1"><code class="java keyword">public</code> <code class="java keyword">void</code> <code class="java plain">testFtpDownload() </code><code class="java keyword">throws</code> <code class="java plain">Exception {</code></div><div class="line number5 index4 alt2"><code class="java plain">File file = </code><code class="java keyword">new</code> <code class="java plain">File(</code><code class="java string">"src/test/resources/output"</code><code class="java plain">);</code></div><div class="line number6 index5 alt1"><code class="java plain">delete(file);</code></div><div class="line number7 index6 alt2"><code class="java plain">FTPClient client = </code><code class="java keyword">new</code> <code class="java plain">FTPClient();</code></div><div class="line number8 index7 alt1"><code class="java plain">client.connect(</code><code class="java string">"localhost"</code><code class="java plain">, </code><code class="java value">9999</code><code class="java plain">);</code></div><div class="line number9 index8 alt2"><code class="java plain">client.login(</code><code class="java string">"user"</code><code class="java plain">, </code><code class="java string">"password"</code><code class="java plain">);</code></div><div class="line number10 index9 alt1"><code class="java plain">String files[] = client.listNames(</code><code class="java string">"/dir"</code><code class="java plain">);</code></div><div class="line number11 index10 alt2"><code class="java plain">client.help();</code></div><div class="line number12 index11 alt1"><code class="java plain">logger.debug(</code><code class="java string">"Before delete"</code> <code class="java plain">+ files[</code><code class="java value">0</code><code class="java plain">]);</code></div><div class="line number13 index12 alt2"><code class="java plain">assertEquals(</code><code class="java value">1</code><code class="java plain">, files.length);</code></div><div class="line number14 index13 alt1"><code class="java plain">downloadUtil.downloadFilesFromRemoteDirectory();</code></div><div class="line number15 index14 alt2"><code class="java plain">logger.debug(</code><code class="java string">"After delete"</code><code class="java plain">);</code></div><div class="line number16 index15 alt1"><code class="java plain">files = client.listNames(</code><code class="java string">"/dir"</code><code class="java plain">);</code></div><div class="line number17 index16 alt2"><code class="java plain">client.help();</code></div><div class="line number18 index17 alt1"><code class="java plain">assertEquals(</code><code class="java value">0</code><code class="java plain">, files.length);</code></div><div class="line number19 index18 alt2"><code class="java plain">assertEquals(</code><code class="java value">1</code><code class="java plain">, file.list().length);</code></div><div class="line number20 index19 alt1"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div>
<p>I hope this blog helped.</p>
					</div><!-- .entry-content -->
		
		<footer class="entry-meta">
			This entry was posted in <a href="https://krishnasblog.com/category/java/spring/spring-integration/" rel="category tag">Spring Integration</a> and tagged <a href="./Spring Integration   Krishna's Blog_files/Spring Integration   Krishna's Blog.htm" rel="tag">Spring Integration</a> on <a href="https://krishnasblog.com/2012/12/11/spring-integration-fakeftpserver-example/" title="10:57 am" rel="bookmark"><time class="entry-date" datetime="2012-12-11T10:57:36+00:00">December 11, 2012</time></a><span class="by-author"> by <span class="author vcard"><a class="url fn n" href="https://krishnasblog.com/author/praskrishna/" title="View all posts by Krishna" rel="author">Krishna</a></span></span>.								</footer><!-- .entry-meta -->
	</article><!-- #post -->

	<article id="post-1555" class="post-1555 post type-post status-publish format-standard hentry category-spring-integration tag-spring-integration">
				<header class="entry-header">
			
						<h1 class="entry-title">
				<a href="https://krishnasblog.com/2012/12/11/spring-integration-mock-sftpserver-example/" rel="bookmark">Spring Integration Mock SftpServer&nbsp;example</a>
			</h1>
										<div class="comments-link">
					<a href="https://krishnasblog.com/2012/12/11/spring-integration-mock-sftpserver-example/#respond"><span class="leave-reply">Leave a reply</span></a>				</div><!-- .comments-link -->
					</header><!-- .entry-header -->

				<div class="entry-content">
			<p>In continuation of my earlier blog <a title="Spring Integration FakeFtpServer example" href="http://blog.gosmarter.net/2012/12/11/spring-integration-fakeftpserver-example/" rel="bookmark">Spring Integration FakeFtpServer example</a> in this example I will show how to test Spring Integration flow using Mock SftpServer. There are few good writeup on the net including the Stackoverflow writeup, <a title="Using Apache Mina as a Mock/In Memory SFTP Server for Unit Testing" href="http://stackoverflow.com/questions/11837948/using-apache-mina-as-a-mock-in-memory-sftp-server-for-unit-testing">Using Apache Mina as a Mock/In Memory SFTP Server for Unit Testing.</a>The code for this blog is @ <a title="Spring Integration flow to test Ftp/Sftp server " href="https://github.com/skprasadu/junit-testing-ftpflow-in-spring-integration">Spring Integration flow to test Ftp/Sftp server</a>.</p>
<p>To run the junit test, run “mvn test” and understand the test flow.</p>
<p>Again talking of the same spring integration flow as mentioned in my earlier blog, I will write test for sftp server,</p>
<div data-shortcode="caption" id="attachment_1556" style="width: 635px" class="wp-caption alignnone"><a href="https://krishnasblog1068.files.wordpress.com/2012/12/mockftp-spring-flow.png"><img class="size-full wp-image-1556" alt="Spring Integration Mock SftpServer example" src="./Spring Integration   Krishna's Blog_files/mockftp-spring-flow.png" width="625" height="151"></a><p class="wp-caption-text">Spring Integration Mock SftpServer example</p></div>
<p>The maven dependency for this is as below,</p>
<div><div id="highlighter_162802" class="syntaxhighlighter  xml"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="xml plain">&lt;</code><code class="xml keyword">dependency</code><code class="xml plain">&gt;</code></div><div class="line number2 index1 alt1"><code class="xml plain">&lt;</code><code class="xml keyword">groupId</code><code class="xml plain">&gt;org.apache.sshd&lt;/</code><code class="xml keyword">groupId</code><code class="xml plain">&gt;</code></div><div class="line number3 index2 alt2"><code class="xml plain">&lt;</code><code class="xml keyword">artifactId</code><code class="xml plain">&gt;sshd-core&lt;/</code><code class="xml keyword">artifactId</code><code class="xml plain">&gt;</code></div><div class="line number4 index3 alt1"><code class="xml plain">&lt;</code><code class="xml keyword">version</code><code class="xml plain">&gt;0.5.0&lt;/</code><code class="xml keyword">version</code><code class="xml plain">&gt;</code></div><div class="line number5 index4 alt2"><code class="xml plain">&lt;/</code><code class="xml keyword">dependency</code><code class="xml plain">&gt;</code></div><div class="line number6 index5 alt1"><code class="xml plain">&lt;</code><code class="xml keyword">dependency</code><code class="xml plain">&gt;</code></div><div class="line number7 index6 alt2"><code class="xml plain">&lt;</code><code class="xml keyword">groupId</code><code class="xml plain">&gt;org.slf4j&lt;/</code><code class="xml keyword">groupId</code><code class="xml plain">&gt;</code></div><div class="line number8 index7 alt1"><code class="xml plain">&lt;</code><code class="xml keyword">artifactId</code><code class="xml plain">&gt;slf4j-api&lt;/</code><code class="xml keyword">artifactId</code><code class="xml plain">&gt;</code></div><div class="line number9 index8 alt2"><code class="xml plain">&lt;</code><code class="xml keyword">version</code><code class="xml plain">&gt;1.6.1&lt;/</code><code class="xml keyword">version</code><code class="xml plain">&gt;</code></div><div class="line number10 index9 alt1"><code class="xml plain">&lt;/</code><code class="xml keyword">dependency</code><code class="xml plain">&gt;</code></div><div class="line number11 index10 alt2"><code class="xml plain">&lt;</code><code class="xml keyword">dependency</code><code class="xml plain">&gt;</code></div><div class="line number12 index11 alt1"><code class="xml plain">&lt;</code><code class="xml keyword">groupId</code><code class="xml plain">&gt;com.jcraft&lt;/</code><code class="xml keyword">groupId</code><code class="xml plain">&gt;</code></div><div class="line number13 index12 alt2"><code class="xml plain">&lt;</code><code class="xml keyword">artifactId</code><code class="xml plain">&gt;jsch&lt;/</code><code class="xml keyword">artifactId</code><code class="xml plain">&gt;</code></div><div class="line number14 index13 alt1"><code class="xml plain">&lt;</code><code class="xml keyword">version</code><code class="xml plain">&gt;0.1.49&lt;/</code><code class="xml keyword">version</code><code class="xml plain">&gt;</code></div><div class="line number15 index14 alt2"><code class="xml plain">&lt;/</code><code class="xml keyword">dependency</code><code class="xml plain">&gt;</code></div><div class="line number16 index15 alt1"><code class="xml plain">&lt;</code><code class="xml keyword">dependency</code><code class="xml plain">&gt;</code></div><div class="line number17 index16 alt2"><code class="xml plain">&lt;</code><code class="xml keyword">groupId</code><code class="xml plain">&gt;org.slf4j&lt;/</code><code class="xml keyword">groupId</code><code class="xml plain">&gt;</code></div><div class="line number18 index17 alt1"><code class="xml plain">&lt;</code><code class="xml keyword">artifactId</code><code class="xml plain">&gt;slf4j-log4j12&lt;/</code><code class="xml keyword">artifactId</code><code class="xml plain">&gt;</code></div><div class="line number19 index18 alt2"><code class="xml plain">&lt;</code><code class="xml keyword">version</code><code class="xml plain">&gt;1.7.2&lt;/</code><code class="xml keyword">version</code><code class="xml plain">&gt;</code></div><div class="line number20 index19 alt1"><code class="xml plain">&lt;/</code><code class="xml keyword">dependency</code><code class="xml plain">&gt;</code></div></div></td></tr></tbody></table></div></div>
<p>The startup and teardown of the junit is as below,</p>
<div><div id="highlighter_797782" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div><div class="line number27 index26 alt2">27</div><div class="line number28 index27 alt1">28</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java color1">@Before</code></div><div class="line number2 index1 alt1"><code class="java keyword">public</code> <code class="java keyword">void</code> <code class="java plain">beforeTestSetup() </code><code class="java keyword">throws</code> <code class="java plain">Exception {</code></div><div class="line number3 index2 alt2"><code class="java plain">sshd = SshServer.setUpDefaultServer();</code></div><div class="line number4 index3 alt1"><code class="java plain">sshd.setPort(</code><code class="java value">22999</code><code class="java plain">);</code></div><div class="line number5 index4 alt2">&nbsp;</div><div class="line number6 index5 alt1"><code class="java plain">sshd.setKeyPairProvider(</code><code class="java keyword">new</code> <code class="java plain">SimpleGeneratorHostKeyProvider(</code><code class="java string">"hostkey.ser"</code><code class="java plain">));</code></div><div class="line number7 index6 alt2"><code class="java plain">sshd.setPasswordAuthenticator(</code><code class="java keyword">new</code> <code class="java plain">PasswordAuthenticator() {</code></div><div class="line number8 index7 alt1">&nbsp;</div><div class="line number9 index8 alt2"><code class="java keyword">public</code> <code class="java keyword">boolean</code> <code class="java plain">authenticate(String username, String password, ServerSession session) {</code></div><div class="line number10 index9 alt1"><code class="java comments">// TODO Auto-generated method stub</code></div><div class="line number11 index10 alt2"><code class="java keyword">return</code> <code class="java keyword">true</code><code class="java plain">;</code></div><div class="line number12 index11 alt1"><code class="java plain">}</code></div><div class="line number13 index12 alt2"><code class="java plain">});</code></div><div class="line number14 index13 alt1">&nbsp;</div><div class="line number15 index14 alt2"><code class="java plain">CommandFactory myCommandFactory = </code><code class="java keyword">new</code> <code class="java plain">CommandFactory() {</code></div><div class="line number16 index15 alt1">&nbsp;</div><div class="line number17 index16 alt2"><code class="java keyword">public</code> <code class="java plain">Command createCommand(String command) {</code></div><div class="line number18 index17 alt1"><code class="java plain">System.out.println(</code><code class="java string">"Command: "</code> <code class="java plain">+ command);</code></div><div class="line number19 index18 alt2"><code class="java keyword">return</code> <code class="java keyword">null</code><code class="java plain">;</code></div><div class="line number20 index19 alt1"><code class="java plain">}</code></div><div class="line number21 index20 alt2"><code class="java plain">};</code></div><div class="line number22 index21 alt1"><code class="java plain">sshd.setCommandFactory(</code><code class="java keyword">new</code> <code class="java plain">ScpCommandFactory(myCommandFactory));</code></div><div class="line number23 index22 alt2">&nbsp;</div><div class="line number24 index23 alt1"><code class="java plain">List&lt;NamedFactory&lt;command&gt;&gt; namedFactoryList = </code><code class="java keyword">new</code> <code class="java plain">ArrayList&lt;NamedFactory&lt;command&gt;&gt;(); namedFactoryList.add(</code><code class="java keyword">new</code> <code class="java plain">SftpSubsystem.Factory()); sshd.setSubsystemFactories(namedFactoryList); sshd.start(); }</code></div><div class="line number25 index24 alt2">&nbsp;</div><div class="line number26 index25 alt1"><code class="java color1">@After</code></div><div class="line number27 index26 alt2">&nbsp;</div><div class="line number28 index27 alt1"><code class="java keyword">public</code> <code class="java keyword">void</code> <code class="java plain">teardown() </code><code class="java keyword">throws</code> <code class="java plain">Exception { sshd.stop(); }</code></div></div></td></tr></tbody></table></div></div>
<p>The Junit test is as below,</p>
<div><div id="highlighter_764064" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div><div class="line number27 index26 alt2">27</div><div class="line number28 index27 alt1">28</div><div class="line number29 index28 alt2">29</div><div class="line number30 index29 alt1">30</div><div class="line number31 index30 alt2">31</div><div class="line number32 index31 alt1">32</div><div class="line number33 index32 alt2">33</div><div class="line number34 index33 alt1">34</div><div class="line number35 index34 alt2">35</div><div class="line number36 index35 alt1">36</div><div class="line number37 index36 alt2">37</div><div class="line number38 index37 alt1">38</div><div class="line number39 index38 alt2">39</div><div class="line number40 index39 alt1">40</div><div class="line number41 index40 alt2">41</div><div class="line number42 index41 alt1">42</div><div class="line number43 index42 alt2">43</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java keyword">public</code> <code class="java keyword">void</code> <code class="java plain">testPutAndGetFile() </code><code class="java keyword">throws</code> <code class="java plain">Exception {</code></div><div class="line number2 index1 alt1"><code class="java plain">JSch jsch = </code><code class="java keyword">new</code> <code class="java plain">JSch();</code></div><div class="line number3 index2 alt2">&nbsp;</div><div class="line number4 index3 alt1"><code class="java plain">Hashtable config = </code><code class="java keyword">new</code> <code class="java plain">Hashtable();</code></div><div class="line number5 index4 alt2"><code class="java plain">config.put(</code><code class="java string">"StrictHostKeyChecking"</code><code class="java plain">, </code><code class="java string">"no"</code><code class="java plain">);</code></div><div class="line number6 index5 alt1"><code class="java plain">JSch.setConfig(config);</code></div><div class="line number7 index6 alt2">&nbsp;</div><div class="line number8 index7 alt1"><code class="java plain">Session session = jsch.getSession(</code><code class="java string">"remote-username"</code><code class="java plain">, </code><code class="java string">"localhost"</code><code class="java plain">, </code><code class="java value">22999</code><code class="java plain">);</code></div><div class="line number9 index8 alt2"><code class="java plain">session.setPassword(</code><code class="java string">"remote-password"</code><code class="java plain">);</code></div><div class="line number10 index9 alt1">&nbsp;</div><div class="line number11 index10 alt2"><code class="java plain">session.connect();</code></div><div class="line number12 index11 alt1">&nbsp;</div><div class="line number13 index12 alt2"><code class="java plain">Channel channel = session.openChannel(</code><code class="java string">"sftp"</code><code class="java plain">);</code></div><div class="line number14 index13 alt1"><code class="java plain">channel.connect();</code></div><div class="line number15 index14 alt2">&nbsp;</div><div class="line number16 index15 alt1"><code class="java plain">ChannelSftp sftpChannel = (ChannelSftp) channel;</code></div><div class="line number17 index16 alt2">&nbsp;</div><div class="line number18 index17 alt1"><code class="java keyword">final</code> <code class="java plain">String testFileContents = </code><code class="java string">"some file contents"</code><code class="java plain">;</code></div><div class="line number19 index18 alt2">&nbsp;</div><div class="line number20 index19 alt1"><code class="java plain">String uploadedFileName = </code><code class="java string">"uploadFile"</code><code class="java plain">;</code></div><div class="line number21 index20 alt2"><code class="java plain">sftpChannel.put(</code><code class="java keyword">new</code> <code class="java plain">ByteArrayInputStream(testFileContents.getBytes()), uploadedFileName);</code></div><div class="line number22 index21 alt1">&nbsp;</div><div class="line number23 index22 alt2"><code class="java plain">String downloadedFileName = </code><code class="java string">"downLoadFile"</code><code class="java plain">;</code></div><div class="line number24 index23 alt1"><code class="java plain">sftpChannel.get(uploadedFileName, downloadedFileName);</code></div><div class="line number25 index24 alt2">&nbsp;</div><div class="line number26 index25 alt1"><code class="java plain">File downloadedFile = </code><code class="java keyword">new</code> <code class="java plain">File(downloadedFileName);</code></div><div class="line number27 index26 alt2"><code class="java plain">assertTrue(downloadedFile.exists());</code></div><div class="line number28 index27 alt1">&nbsp;</div><div class="line number29 index28 alt2"><code class="java plain">String fileData = getFileContents(downloadedFile);</code></div><div class="line number30 index29 alt1">&nbsp;</div><div class="line number31 index30 alt2"><code class="java plain">assertEquals(testFileContents, fileData);</code></div><div class="line number32 index31 alt1">&nbsp;</div><div class="line number33 index32 alt2"><code class="java keyword">if</code> <code class="java plain">(sftpChannel.isConnected()) {</code></div><div class="line number34 index33 alt1"><code class="java plain">sftpChannel.exit();</code></div><div class="line number35 index34 alt2"><code class="java plain">logger.debug(</code><code class="java string">"Disconnected channel"</code><code class="java plain">);</code></div><div class="line number36 index35 alt1"><code class="java plain">}</code></div><div class="line number37 index36 alt2">&nbsp;</div><div class="line number38 index37 alt1"><code class="java keyword">if</code> <code class="java plain">(session.isConnected()) {</code></div><div class="line number39 index38 alt2"><code class="java plain">session.disconnect();</code></div><div class="line number40 index39 alt1"><code class="java plain">logger.debug(</code><code class="java string">"Disconnected session"</code><code class="java plain">);</code></div><div class="line number41 index40 alt2"><code class="java plain">}</code></div><div class="line number42 index41 alt1">&nbsp;</div><div class="line number43 index42 alt2"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div>
<p>I hope this blog helped you.</p>
					</div><!-- .entry-content -->
		
		<footer class="entry-meta">
			This entry was posted in <a href="https://krishnasblog.com/category/java/spring/spring-integration/" rel="category tag">Spring Integration</a> and tagged <a href="./Spring Integration   Krishna's Blog_files/Spring Integration   Krishna's Blog.htm" rel="tag">Spring Integration</a> on <a href="https://krishnasblog.com/2012/12/11/spring-integration-mock-sftpserver-example/" title="10:49 am" rel="bookmark"><time class="entry-date" datetime="2012-12-11T10:49:22+00:00">December 11, 2012</time></a><span class="by-author"> by <span class="author vcard"><a class="url fn n" href="https://krishnasblog.com/author/praskrishna/" title="View all posts by Krishna" rel="author">Krishna</a></span></span>.								</footer><!-- .entry-meta -->
	</article><!-- #post -->

	<article id="post-1258" class="post-1258 post type-post status-publish format-standard hentry category-spring-integration tag-spring-integration">
				<header class="entry-header">
			
						<h1 class="entry-title">
				<a href="https://krishnasblog.com/2012/11/17/managing-raw-soap-message-within-spring-integration-part-2/" rel="bookmark">Managing Raw SOAP message within Spring Integration – Part&nbsp;2</a>
			</h1>
										<div class="comments-link">
					<a href="https://krishnasblog.com/2012/11/17/managing-raw-soap-message-within-spring-integration-part-2/#comments">1 Reply</a>				</div><!-- .comments-link -->
					</header><!-- .entry-header -->

				<div class="entry-content">
			<p>In my earlier blog, <a title="Managing Raw SOAP message within Spring Integration" href="https://krishnasblog.com/2012/11/14/managing-raw-soap-message-within-spring-integration/">Managing Raw SOAP message within Spring&nbsp;Integration</a>, I demonstrated how to get the raw SOAP message from <strong>int-http:inbound-gateway</strong> and process the SOAP message.</p>
<p>There are few scenarios, where in the <strong>Spring Integration</strong> flow is invoked by an event. Where&nbsp;<em>Spring Integration</em> flow, should get a payload from source <strong>Webservice</strong> and just transfer it to target <em>Webservice</em>, acting as a Proxy, retaining all the properties of the source and target systems.</p>
<p>In this blog I will demonstrate how you can create a Proxy and how <strong>int-ws-outbound-gateway</strong> can call the Proxy service when calling Source Webservice. If you notice <em>int-ws-outbound-gateway</em> carefully, we can configure the security keystore and other properties. These properties will be retained, when the payload is passed to the Proxy. Once the request payload is in the Proxy, it can be sent to the source Webservice and once we get the response, we can bind it to another channel, which can be processed further or sent to the target Webservice.</p>
<div data-shortcode="caption" id="attachment_1246" style="width: 635px" class="wp-caption alignnone"><a href="https://krishnasblog1068.files.wordpress.com/2012/11/managing-raw-soap-message-within-spring-integration.png"><img class="size-full wp-image-1246" title="Managing Raw SOAP message within Spring Integration" alt="Managing Raw SOAP message within Spring Integration" src="./Spring Integration   Krishna's Blog_files/managing-raw-soap-message-within-spring-integration.png" height="203" width="625"></a><p class="wp-caption-text">Managing Raw SOAP message within Spring Integration</p></div>
<div><div id="highlighter_740380" class="syntaxhighlighter  xml"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div><div class="line number18 index17 alt1">18</div><div class="line number19 index18 alt2">19</div><div class="line number20 index19 alt1">20</div><div class="line number21 index20 alt2">21</div><div class="line number22 index21 alt1">22</div><div class="line number23 index22 alt2">23</div><div class="line number24 index23 alt1">24</div><div class="line number25 index24 alt2">25</div><div class="line number26 index25 alt1">26</div><div class="line number27 index26 alt2">27</div><div class="line number28 index27 alt1">28</div><div class="line number29 index28 alt2">29</div><div class="line number30 index29 alt1">30</div><div class="line number31 index30 alt2">31</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="xml plain">&lt;</code><code class="xml keyword">int:channel</code> <code class="xml color1">id</code><code class="xml plain">=</code><code class="xml string">"ws.outbound"</code> <code class="xml plain">/&gt;</code></div><div class="line number2 index1 alt1">&nbsp;</div><div class="line number3 index2 alt2"><code class="xml spaces">&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">int-ws:outbound-gateway</code> <code class="xml color1">id</code><code class="xml plain">=</code><code class="xml string">"ws.gateway"</code></div><div class="line number4 index3 alt1"><code class="xml spaces">&nbsp;</code><code class="xml color1">request-channel</code><code class="xml plain">=</code><code class="xml string">"ws.inbound"</code> <code class="xml color1">reply-channel</code><code class="xml plain">=</code><code class="xml string">"ws.outbound"</code></div><div class="line number5 index4 alt2"><code class="xml spaces">&nbsp;</code><code class="xml color1">ignore-empty-responses</code><code class="xml plain">=</code><code class="xml string">"true"</code> <code class="xml color1">message-sender</code><code class="xml plain">=</code><code class="xml string">"common.message.sender.ws"</code></div><div class="line number6 index5 alt1"><code class="xml spaces">&nbsp;</code><code class="xml color1">uri</code><code class="xml plain">=</code><code class="xml string">"<a href="http://localhost:8080/http-proxy-for-ws/receiveGateway">http://localhost:8080/http-proxy-for-ws/receiveGateway</a>"</code> <code class="xml plain">/&gt;</code></div><div class="line number7 index6 alt2">&nbsp;</div><div class="line number8 index7 alt1"><code class="xml spaces">&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">int-http:inbound-gateway</code> <code class="xml color1">id</code><code class="xml plain">=</code><code class="xml string">"http.proxy.gateway"</code></div><div class="line number9 index8 alt2"><code class="xml spaces">&nbsp;</code><code class="xml color1">request-channel</code><code class="xml plain">=</code><code class="xml string">"http.proxy.inbound"</code> <code class="xml color1">name</code><code class="xml plain">=</code><code class="xml string">"/receiveGateway"</code></div><div class="line number10 index9 alt1"><code class="xml spaces">&nbsp;</code><code class="xml color1">supported-methods</code><code class="xml plain">=</code><code class="xml string">"POST"</code> <code class="xml plain">/&gt;</code></div><div class="line number11 index10 alt2">&nbsp;</div><div class="line number12 index11 alt1"><code class="xml spaces">&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">int:channel</code> <code class="xml color1">id</code><code class="xml plain">=</code><code class="xml string">"http.proxy.inbound"</code> <code class="xml plain">/&gt;</code></div><div class="line number13 index12 alt2">&nbsp;</div><div class="line number14 index13 alt1"><code class="xml spaces">&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">int:service-activator</code> <code class="xml color1">input-channel</code><code class="xml plain">=</code><code class="xml string">"http.proxy.inbound"</code></div><div class="line number15 index14 alt2"><code class="xml spaces">&nbsp;</code><code class="xml color1">id</code><code class="xml plain">=</code><code class="xml string">"httpProxyServiceActivator"</code> <code class="xml color1">ref</code><code class="xml plain">=</code><code class="xml string">"httpProxyServiceActivatorBean"</code></div><div class="line number16 index15 alt1"><code class="xml spaces">&nbsp;</code><code class="xml color1">method</code><code class="xml plain">=</code><code class="xml string">"sendXml"</code> <code class="xml plain">/&gt;</code></div><div class="line number17 index16 alt2">&nbsp;</div><div class="line number18 index17 alt1"><code class="xml spaces">&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">int:channel</code> <code class="xml color1">id</code><code class="xml plain">=</code><code class="xml string">"http.proxy.outbound"</code> <code class="xml plain">/&gt;</code></div><div class="line number19 index18 alt2">&nbsp;</div><div class="line number20 index19 alt1"><code class="xml spaces">&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">bean</code> <code class="xml color1">id</code><code class="xml plain">=</code><code class="xml string">"httpProxyServiceActivatorBean"</code><code class="xml plain">&gt;</code></div><div class="line number21 index20 alt2"><code class="xml spaces">&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">property</code> <code class="xml color1">name</code><code class="xml plain">=</code><code class="xml string">"uri"</code></div><div class="line number22 index21 alt1"><code class="xml spaces">&nbsp;</code><code class="xml color1">value</code><code class="xml plain">=</code><code class="xml string">"<a href="http://www.webservicex.net/CurrencyConvertor.asmx">http://www.webservicex.net/CurrencyConvertor.asmx</a>"</code> <code class="xml plain">/&gt;</code></div><div class="line number23 index22 alt2"><code class="xml spaces">&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">property</code> <code class="xml color1">name</code><code class="xml plain">=</code><code class="xml string">"soapAction"</code> <code class="xml color1">value</code><code class="xml plain">=</code><code class="xml string">"<a href="http://www.webservicex.net/ConversionRate">http://www.webserviceX.NET/ConversionRate</a>"</code> <code class="xml plain">/&gt;</code></div><div class="line number24 index23 alt1"><code class="xml spaces">&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">property</code> <code class="xml color1">name</code><code class="xml plain">=</code><code class="xml string">"wsOutboundChannel"</code> <code class="xml color1">ref</code><code class="xml plain">=</code><code class="xml string">"http.proxy.outbound"</code> <code class="xml plain">/&gt;</code></div><div class="line number25 index24 alt2"><code class="xml spaces">&nbsp;</code><code class="xml plain">&lt;/</code><code class="xml keyword">bean</code><code class="xml plain">&gt;</code></div><div class="line number26 index25 alt1">&nbsp;</div><div class="line number27 index26 alt2"><code class="xml spaces">&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">int:service-activator</code> <code class="xml color1">input-channel</code><code class="xml plain">=</code><code class="xml string">"http.proxy.outbound"</code></div><div class="line number28 index27 alt1"><code class="xml spaces">&nbsp;</code><code class="xml color1">id</code><code class="xml plain">=</code><code class="xml string">"finalProcessorServiceActivator"</code> <code class="xml color1">ref</code><code class="xml plain">=</code><code class="xml string">"finalProcessorServiceActivatorBean"</code></div><div class="line number29 index28 alt2"><code class="xml spaces">&nbsp;</code><code class="xml color1">method</code><code class="xml plain">=</code><code class="xml string">"sendXml"</code> <code class="xml plain">/&gt;</code></div><div class="line number30 index29 alt1">&nbsp;</div><div class="line number31 index30 alt2"><code class="xml spaces">&nbsp;</code><code class="xml plain">&lt;</code><code class="xml keyword">bean</code> <code class="xml color1">id</code><code class="xml plain">=</code><code class="xml string">"finalProcessorServiceActivatorBean"</code> <code class="xml plain">/&gt;</code></div></div></td></tr></tbody></table></div></div>
					</div><!-- .entry-content -->
		
		<footer class="entry-meta">
			This entry was posted in <a href="https://krishnasblog.com/category/java/spring/spring-integration/" rel="category tag">Spring Integration</a> and tagged <a href="./Spring Integration   Krishna's Blog_files/Spring Integration   Krishna's Blog.htm" rel="tag">Spring Integration</a> on <a href="https://krishnasblog.com/2012/11/17/managing-raw-soap-message-within-spring-integration-part-2/" title="11:55 pm" rel="bookmark"><time class="entry-date" datetime="2012-11-17T23:55:34+00:00">November 17, 2012</time></a><span class="by-author"> by <span class="author vcard"><a class="url fn n" href="https://krishnasblog.com/author/praskrishna/" title="View all posts by Krishna" rel="author">Krishna</a></span></span>.								</footer><!-- .entry-meta -->
	</article><!-- #post -->

	<article id="post-1243" class="post-1243 post type-post status-publish format-standard hentry category-spring-integration tag-spring-integration">
				<header class="entry-header">
			
						<h1 class="entry-title">
				<a href="https://krishnasblog.com/2012/11/14/managing-raw-soap-message-within-spring-integration/" rel="bookmark">Managing Raw SOAP message within Spring&nbsp;Integration</a>
			</h1>
										<div class="comments-link">
					<a href="https://krishnasblog.com/2012/11/14/managing-raw-soap-message-within-spring-integration/#comments">4 Replies</a>				</div><!-- .comments-link -->
					</header><!-- .entry-header -->

				<div class="entry-content">
			<p>In <strong>Spring Integration</strong> if we use<strong> int-ws:outbound-gateway, </strong>once a message is associated to the request channel, the <em>Spring Integration</em> container add the SOAP header information and sends the SOAP payload to the target system to be processed. Most of the time, this is what is needed, but sometimes, we just need the integration layer to act as a proxy. The SOAP payload coming from the source system is just handed to the target system retaining all the properties of source system like security, enrichment and others.</p>
<p>In this case the trick is instead of using <strong>int-ws:outbound-gateway, </strong>we should use <strong>int-http:inbound-gateway </strong>and&nbsp;<strong>int-http:outbound-gateway. </strong>This way you can fool the target system to accept this as a SOAP message. We can also make it aware what soapAction we need to execute is a below,<em><strong><br>
</strong></em></p>
<div><div id="highlighter_455503" class="syntaxhighlighter  xml"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div><div class="line number12 index11 alt1">12</div><div class="line number13 index12 alt2">13</div><div class="line number14 index13 alt1">14</div><div class="line number15 index14 alt2">15</div><div class="line number16 index15 alt1">16</div><div class="line number17 index16 alt2">17</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="xml plain">&lt;</code><code class="xml keyword">int-http:inbound-gateway</code> <code class="xml color1">id</code><code class="xml plain">=</code><code class="xml string">"webservice.inbound.gateway"</code></div><div class="line number2 index1 alt1"><code class="xml color1">request-channel</code><code class="xml plain">=</code><code class="xml string">"http.outbound.enrich.in"</code> <code class="xml color1">reply-channel</code><code class="xml plain">=</code><code class="xml string">"ws.outbound"</code></div><div class="line number3 index2 alt2"><code class="xml color1">name</code><code class="xml plain">=</code><code class="xml string">"/receiveGateway"</code> <code class="xml color1">supported-methods</code><code class="xml plain">=</code><code class="xml string">"POST"</code> <code class="xml plain">/&gt;</code></div><div class="line number4 index3 alt1">&nbsp;</div><div class="line number5 index4 alt2"><code class="xml plain">&lt;</code><code class="xml keyword">int:header-enricher</code> <code class="xml color1">input-channel</code><code class="xml plain">=</code><code class="xml string">"http.outbound.enrich.in"</code></div><div class="line number6 index5 alt1"><code class="xml color1">output-channel</code><code class="xml plain">=</code><code class="xml string">"ws.inbound"</code><code class="xml plain">&gt;</code></div><div class="line number7 index6 alt2"><code class="xml plain">&lt;</code><code class="xml keyword">int:header</code> <code class="xml color1">name</code><code class="xml plain">=</code><code class="xml string">"Content-Type"</code> <code class="xml color1">value</code><code class="xml plain">=</code><code class="xml string">"text/xml;charset=UTF-8"</code> <code class="xml plain">/&gt;</code></div><div class="line number8 index7 alt1"><code class="xml plain">&lt;</code><code class="xml keyword">int:header</code> <code class="xml color1">name</code><code class="xml plain">=</code><code class="xml string">"SoapAction"</code></div><div class="line number9 index8 alt2"><code class="xml color1">value</code><code class="xml plain">=</code><code class="xml string">"<a href="http://www.webservicex.net/ConversionRate">http://www.webserviceX.NET/ConversionRate</a>"</code> <code class="xml plain">/&gt;</code></div><div class="line number10 index9 alt1"><code class="xml plain">&lt;/</code><code class="xml keyword">int:header-enricher</code><code class="xml plain">&gt;</code></div><div class="line number11 index10 alt2">&nbsp;</div><div class="line number12 index11 alt1"><code class="xml plain">&lt;</code><code class="xml keyword">int:channel</code> <code class="xml color1">id</code><code class="xml plain">=</code><code class="xml string">"ws.outbound"</code> <code class="xml plain">/&gt;</code></div><div class="line number13 index12 alt2">&nbsp;</div><div class="line number14 index13 alt1"><code class="xml plain">&lt;</code><code class="xml keyword">int-http:outbound-gateway</code> <code class="xml color1">id</code><code class="xml plain">=</code><code class="xml string">"webservice.outbound.gateway"</code></div><div class="line number15 index14 alt2"><code class="xml color1">request-channel</code><code class="xml plain">=</code><code class="xml string">"ws.inbound"</code> <code class="xml color1">reply-channel</code><code class="xml plain">=</code><code class="xml string">"ws.outbound"</code></div><div class="line number16 index15 alt1"><code class="xml color1">url</code><code class="xml plain">=</code><code class="xml string">"<a href="http://www.webservicex.net/CurrencyConvertor.asmx">http://www.webservicex.net/CurrencyConvertor.asmx</a>"</code></div><div class="line number17 index16 alt2"><code class="xml color1">expected-response-type</code><code class="xml plain">=</code><code class="xml string">"java.lang.String"</code> <code class="xml plain">/&gt;</code></div></div></td></tr></tbody></table></div></div>
<p>The Spring Integration flow is as below,</p>
<div data-shortcode="caption" id="attachment_1251" style="width: 635px" class="wp-caption alignnone"><a href="https://krishnasblog1068.files.wordpress.com/2012/11/managing-raw-soap-message-within-spring-integration1.png"><img class="size-full wp-image-1251" title="Managing Raw SOAP message within Spring Integration" alt="Managing Raw SOAP message within Spring Integration" src="./Spring Integration   Krishna's Blog_files/managing-raw-soap-message-within-spring-integration1.png" height="153" width="625"></a><p class="wp-caption-text">Managing Raw SOAP message within Spring Integration</p></div>
<p>I hope this blog helped you.</p>
					</div><!-- .entry-content -->
		
		<footer class="entry-meta">
			This entry was posted in <a href="https://krishnasblog.com/category/java/spring/spring-integration/" rel="category tag">Spring Integration</a> and tagged <a href="./Spring Integration   Krishna's Blog_files/Spring Integration   Krishna's Blog.htm" rel="tag">Spring Integration</a> on <a href="https://krishnasblog.com/2012/11/14/managing-raw-soap-message-within-spring-integration/" title="11:53 pm" rel="bookmark"><time class="entry-date" datetime="2012-11-14T23:53:11+00:00">November 14, 2012</time></a><span class="by-author"> by <span class="author vcard"><a class="url fn n" href="https://krishnasblog.com/author/praskrishna/" title="View all posts by Krishna" rel="author">Krishna</a></span></span>.								</footer><!-- .entry-meta -->
	</article><!-- #post -->

	<article id="post-956" class="post-956 post type-post status-publish format-standard hentry category-spring-integration tag-spring-integration">
				<header class="entry-header">
			
						<h1 class="entry-title">
				<a href="https://krishnasblog.com/2012/10/23/claimcheck-pattern-with-vfabric-rabbitmq-and-gemfire/" rel="bookmark">Claimcheck pattern with vFabric RabbitMQ and&nbsp;Gemfire</a>
			</h1>
										<div class="comments-link">
					<a href="https://krishnasblog.com/2012/10/23/claimcheck-pattern-with-vfabric-rabbitmq-and-gemfire/#respond"><span class="leave-reply">Leave a reply</span></a>				</div><!-- .comments-link -->
					</header><!-- .entry-header -->

				<div class="entry-content">
			<p>For people in hurry <a title="Claimcheck Pattern with vFabric RabbitMQ and Gemfire" href="https://github.com/skprasadu/spring-integration-amqp-gemfire-claimcheck">refer the steps to run this sample</a>.</p>
<p>In continuation to my earlier <a title="Claimcheck Pattern Using Spring Integration and Gemfire" href="https://krishnasblog.com/2012/09/29/claimcheck-pattern-using-spring-integration-and-gemfire/">blog on Claimcheck Pattern </a>in this blog I use <a href="https://krishnasblog.com/2012/10/18/amqp-backed-spring-integration-using-vfabric-rabbitmq/">AMQP backed message channel</a> to simplify implement <i>Claimcheck Pattern</i>. There is also another <a title="Claimcheck Pattern with vFabric RabbitMQ and Gemfire" href="http://java.dzone.com/articles/spring-integration-payload-0">good blog on Spring Integration – Payload Storage via Claim-check</a>, which talks about <b>Claimcheck Pattern</b></p>
<p>The Enterprise Integration Pattern flow is as below,</p>
<div data-shortcode="caption" id="attachment_976" style="width: 635px" class="wp-caption alignnone"><a href="https://krishnasblog1068.files.wordpress.com/2012/10/claimcheck-pattern-with-vfabric-rabbitmq-and-gemfire.png"><img class="size-full wp-image-976" title="Claimcheck-pattern-with-vFabric-RabbitMQ-and-Gemfire" alt="Claimcheck pattern with vFabric RabbitMQ and Gemfire" src="./Spring Integration   Krishna's Blog_files/claimcheck-pattern-with-vfabric-rabbitmq-and-gemfire.png" height="205" width="625"></a><p class="wp-caption-text">Claimcheck pattern with vFabric RabbitMQ and Gemfire</p></div>
<p>The use case in this blog is, there is a message that gets posted on to a Queue, the message checks into a <a title="vFabric Gemfire" href="https://www.vmware.com/support/pubs/vfabric-gemfire.html">vFabric Gemfire</a> messageStore, and a GUID is extracted and posted on to a <a title="vFabric RabbitMQ" href="http://www.vmware.com/products/application-platform/vfabric-rabbitmq/overview.html">vFabric RabbitMQ</a> <a title="vFabric RabbitMQ Exchange" href="http://www.rabbitmq.com/tutorials/amqp-concepts.html">Exchange</a>. The subscribers listening to that <b>Exchange</b> and will get the GUID and checks out of the messageStore and calls a Service activator.</p>
<p>As per the Test First development, the JUnit test case looks as below,</p>
<div><div id="highlighter_709035" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java color1">@Test</code></div><div class="line number2 index1 alt1"><code class="java keyword">public</code> <code class="java keyword">void</code> <code class="java plain">testIntegration() {</code></div><div class="line number3 index2 alt2"><code class="java plain">String request = streamToString(getClass().getResourceAsStream(</code></div><div class="line number4 index3 alt1"><code class="java string">"/data/payload.xml"</code><code class="java plain">));</code></div><div class="line number5 index4 alt2"><code class="java plain">Message&lt;String&gt; message = MessageBuilder.withPayload(request)</code></div><div class="line number6 index5 alt1"><code class="java plain">.build();</code></div><div class="line number7 index6 alt2"><code class="java plain">channel.send(message);</code></div><div class="line number8 index7 alt1"><code class="java plain">String outMessage = outChannel.receive(</code><code class="java value">1000</code><code class="java plain">).getPayload().toString();</code></div><div class="line number9 index8 alt2"><code class="java plain">assertEquals(outMessage, request);</code></div><div class="line number10 index9 alt1"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div>
<p>In the test code, since there is no transformation, we just compare the input data to the data coming out of the target channel.</p>
<p>The test configuration looks as below,</p>
<div><div id="highlighter_456170" class="syntaxhighlighter  xml"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="xml plain">&lt;</code><code class="xml keyword">int:channel</code> <code class="xml color1">id</code><code class="xml plain">=</code><code class="xml string">"p2p-pollable-channel"</code> <code class="xml plain">/&gt;</code></div><div class="line number2 index1 alt1"><code class="xml plain">&lt;</code><code class="xml keyword">int:publish-subscribe-channel</code> <code class="xml color1">id</code><code class="xml plain">=</code><code class="xml string">"pub-sub-channel"</code> <code class="xml plain">/&gt;</code></div><div class="line number3 index2 alt2"><code class="xml plain">&lt;</code><code class="xml keyword">int:channel</code> <code class="xml color1">id</code><code class="xml plain">=</code><code class="xml string">"checkout-channel3"</code> <code class="xml plain">&gt;</code></div><div class="line number4 index3 alt1"><code class="xml plain">&lt;</code><code class="xml keyword">int:queue</code> <code class="xml plain">/&gt;</code></div><div class="line number5 index4 alt2"><code class="xml plain">&lt;/</code><code class="xml keyword">int:channel</code><code class="xml plain">&gt;</code></div><div class="line number6 index5 alt1"><code class="xml plain">&lt;</code><code class="xml keyword">int:claim-check-out</code> <code class="xml color1">message-store</code><code class="xml plain">=</code><code class="xml string">"simpleMessageStore"</code></div><div class="line number7 index6 alt2"><code class="xml color1">input-channel</code><code class="xml plain">=</code><code class="xml string">"pub-sub-channel"</code> <code class="xml color1">output-channel</code><code class="xml plain">=</code><code class="xml string">"checkout-channel3"</code></div><div class="line number8 index7 alt1"><code class="xml color1">remove-message</code><code class="xml plain">=</code><code class="xml string">"false"</code> <code class="xml plain">/&gt;</code></div></div></td></tr></tbody></table></div></div>
<p>In the main configuration the <b>vFabric RabbitMQ</b> configuration looks as below,</p>
<div><div id="highlighter_620048" class="syntaxhighlighter  xml"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="xml comments">&lt;!-- A reference to the org.springframework.amqp.rabbit.connection.ConnectionFactory --&gt;</code></div><div class="line number2 index1 alt1"><code class="xml plain">&lt;</code><code class="xml keyword">rabbit:connection-factory</code> <code class="xml color1">id</code><code class="xml plain">=</code><code class="xml string">"connectionFactory"</code> <code class="xml plain">/&gt;</code></div><div class="line number3 index2 alt2"><code class="xml comments">&lt;!-- Creates a org.springframework.amqp.rabbit.core.RabbitAdmin to manage</code></div><div class="line number4 index3 alt1"><code class="xml comments">exchanges, queues and bindings --&gt;</code></div><div class="line number5 index4 alt2"><code class="xml plain">&lt;</code><code class="xml keyword">rabbit:admin</code> <code class="xml color1">connection-factory</code><code class="xml plain">=</code><code class="xml string">"connectionFactory"</code> <code class="xml plain">/&gt;</code></div><div class="line number6 index5 alt1"><code class="xml plain">&lt;</code><code class="xml keyword">int-amqp:channel</code> <code class="xml color1">id</code><code class="xml plain">=</code><code class="xml string">"p2p-pollable-channel"</code> <code class="xml color1">connection-factory</code><code class="xml plain">=</code><code class="xml string">"connectionFactory"</code> <code class="xml plain">/&gt;</code></div><div class="line number7 index6 alt2"><code class="xml plain">&lt;</code><code class="xml keyword">int-amqp:publish-subscribe-channel</code> <code class="xml color1">id</code><code class="xml plain">=</code><code class="xml string">"pub-sub-channel"</code> <code class="xml color1">connection-factory</code><code class="xml plain">=</code><code class="xml string">"connectionFactory"</code> <code class="xml plain">/&gt;</code></div></div></td></tr></tbody></table></div></div>
<p>In the main configuration the <b>vFabric Gemfire</b> messageStore configuration looks as below,</p>
<div><div id="highlighter_728281" class="syntaxhighlighter  xml"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="xml plain">&lt;</code><code class="xml keyword">bean</code> <code class="xml color1">id</code><code class="xml plain">=</code><code class="xml string">"simpleMessageStore"</code></div><div class="line number2 index1 alt1"><code class="xml color1">class</code><code class="xml plain">=</code><code class="xml string">"org.springframework.integration.gemfire.store.GemfireMessageStore"</code><code class="xml plain">&gt;</code></div><div class="line number3 index2 alt2"><code class="xml plain">&lt;</code><code class="xml keyword">constructor-arg</code> <code class="xml color1">ref</code><code class="xml plain">=</code><code class="xml string">"myCache"</code> <code class="xml plain">/&gt;</code></div><div class="line number4 index3 alt1"><code class="xml plain">&lt;/</code><code class="xml keyword">bean</code><code class="xml plain">&gt;</code></div><div class="line number5 index4 alt2"><code class="xml plain">&lt;</code><code class="xml keyword">gfe:cache</code> <code class="xml color1">id</code><code class="xml plain">=</code><code class="xml string">"myCache"</code> <code class="xml plain">/&gt;</code></div></div></td></tr></tbody></table></div></div>
<p>Finally the integration flow demonstrate the claim checkin and claim checkout as below,</p>
<div><div id="highlighter_820059" class="syntaxhighlighter  xml"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="xml plain">&lt;</code><code class="xml keyword">int:claim-check-in</code> <code class="xml color1">message-store</code><code class="xml plain">=</code><code class="xml string">"simpleMessageStore"</code></div><div class="line number2 index1 alt1"><code class="xml color1">input-channel</code><code class="xml plain">=</code><code class="xml string">"p2p-pollable-channel"</code> <code class="xml color1">output-channel</code><code class="xml plain">=</code><code class="xml string">"pub-sub-channel"</code> <code class="xml plain">/&gt;</code></div><div class="line number3 index2 alt2">&nbsp;</div><div class="line number4 index3 alt1"><code class="xml plain">&lt;</code><code class="xml keyword">int:claim-check-out</code> <code class="xml color1">message-store</code><code class="xml plain">=</code><code class="xml string">"simpleMessageStore"</code></div><div class="line number5 index4 alt2"><code class="xml color1">input-channel</code><code class="xml plain">=</code><code class="xml string">"pub-sub-channel"</code> <code class="xml color1">output-channel</code><code class="xml plain">=</code><code class="xml string">"checkout-channel1"</code></div><div class="line number6 index5 alt1"><code class="xml color1">remove-message</code><code class="xml plain">=</code><code class="xml string">"false"</code> <code class="xml plain">/&gt;</code></div><div class="line number7 index6 alt2">&nbsp;</div><div class="line number8 index7 alt1"><code class="xml plain">&lt;</code><code class="xml keyword">int:claim-check-out</code> <code class="xml color1">message-store</code><code class="xml plain">=</code><code class="xml string">"simpleMessageStore"</code></div><div class="line number9 index8 alt2"><code class="xml color1">input-channel</code><code class="xml plain">=</code><code class="xml string">"pub-sub-channel"</code> <code class="xml color1">output-channel</code><code class="xml plain">=</code><code class="xml string">"checkout-channel2"</code></div><div class="line number10 index9 alt1"><code class="xml color1">remove-message</code><code class="xml plain">=</code><code class="xml string">"false"</code> <code class="xml plain">/&gt;</code></div></div></td></tr></tbody></table></div></div>
<p>If you notice carefully, “p2p-pollable-channel” and “pub-sub-channel” are physical <em>Queues and Exchanges</em> in <em>vFabric RabbitMQ</em> as per the last blog on <a title="Amqp Backed Spring Integration Using vFabric Rabbitmq" href="https://krishnasblog.com/2012/10/18/amqp-backed-spring-integration-using-vfabric-rabbitmq/">Amqp Backed Spring Integration Using vFabric Rabbitmq</a></p>
					</div><!-- .entry-content -->
		
		<footer class="entry-meta">
			This entry was posted in <a href="https://krishnasblog.com/category/java/spring/spring-integration/" rel="category tag">Spring Integration</a> and tagged <a href="./Spring Integration   Krishna's Blog_files/Spring Integration   Krishna's Blog.htm" rel="tag">Spring Integration</a> on <a href="https://krishnasblog.com/2012/10/23/claimcheck-pattern-with-vfabric-rabbitmq-and-gemfire/" title="11:13 am" rel="bookmark"><time class="entry-date" datetime="2012-10-23T11:13:58+00:00">October 23, 2012</time></a><span class="by-author"> by <span class="author vcard"><a class="url fn n" href="https://krishnasblog.com/author/praskrishna/" title="View all posts by Krishna" rel="author">Krishna</a></span></span>.								</footer><!-- .entry-meta -->
	</article><!-- #post -->

	<article id="post-921" class="post-921 post type-post status-publish format-standard hentry category-spring-integration tag-spring-integration">
				<header class="entry-header">
			
						<h1 class="entry-title">
				<a href="https://krishnasblog.com/2012/10/21/control-bus-pattern-with-spring-integration-and-jms/" rel="bookmark">Control Bus Pattern with Spring Integration and&nbsp;JMS</a>
			</h1>
										<div class="comments-link">
					<a href="https://krishnasblog.com/2012/10/21/control-bus-pattern-with-spring-integration-and-jms/#respond"><span class="leave-reply">Leave a reply</span></a>				</div><!-- .comments-link -->
					</header><!-- .entry-header -->

				<div class="entry-content">
			<p>For people in hurry, <a title="Spring Integration Control Bus with JMS" href="https://github.com/skprasadu/spring-integration-controlbus">refer the steps and the demo</a>.</p>
<h2>Introduction</h2>
<p><a title="Control Bus Pattern is a Enterprise Integration Pattern" href="http://www.eaipatterns.com/ControlBus.html" target="_blank">Control Bus Pattern is a Enterprise Integration Pattern</a> is used to control distributed systems in <a title="Spring Integration" href="http://www.springsource.org/spring-integration" target="_blank">Spring Integration</a>. In this blog, I will show you how a <strong>Control Bus</strong> can control your application or a component to start or stop listening to <a title="JMS based Queue" href="http://activemq.apache.org/jms.html" target="_blank">JMS message</a>. In this example, we are using JMS queue to start and stop the jms <strong>inbound-channel-adapter</strong>, we can also do this with jdbc <em>inbound-channel-adapter</em> and control this thru an external application. The other way to do the same is by <a title="Spring Integration Jms Mbean Configuration" href="https://krishnasblog.com/2012/09/25/spring-integration-jms-mbean-configuration/">using MBean as in this example</a>.</p>
<p>In this use case, there is a <strong>Spring Integration</strong> flow. This <em>Spring Integration</em> flow can be controlled by sending start / stop message to <a title="Inbound-channel-adapter" href="http://static.springsource.org/spring-integration/docs/2.0.0.RC1/reference/html/channel-adapter.html">inbound-channel-adapter </a>from a <a title="ActiveMQ queue" href="http://activemq.apache.org/">ActiveMQ</a> <strong>JMS</strong> queue.</p>
<h2>Details Control Bus with Spring Integration</h2>
<div data-shortcode="caption" id="attachment_926" style="width: 591px" class="wp-caption alignnone"><a href="https://krishnasblog1068.files.wordpress.com/2012/10/control-bus-spring-integration-jms.png"><img class="size-full wp-image-926" title="control-bus-spring-integration-jms" alt="Control Bus Spring Integration JMS" src="./Spring Integration   Krishna's Blog_files/control-bus-spring-integration-jms.png"></a><p class="wp-caption-text">Control Bus Spring Integration JMS</p></div>
<p>To start implementing this use case, we write the JUnit test 1st. If you notice once the inboundAdapter is started the message is received from the adapterOutchannel. Once the inboundAdapter is stopped no message is received. This is demonstrated as below,</p>
<div><div id="highlighter_143972" class="syntaxhighlighter  java"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="java color1">@Test</code></div><div class="line number2 index1 alt1"><code class="java keyword">public</code> <code class="java keyword">void</code> <code class="java plain">demoControlBus() {</code></div><div class="line number3 index2 alt2"><code class="java plain">assertNull(adapterOutputChanel.receive(</code><code class="java value">1000</code><code class="java plain">));</code></div><div class="line number4 index3 alt1"><code class="java plain">controlChannel.send(</code><code class="java keyword">new</code> <code class="java plain">GenericMessage&lt;String&gt;(</code><code class="java string">"@inboundAdapter.start()"</code><code class="java plain">));</code></div><div class="line number5 index4 alt2"><code class="java plain">assertNotNull(adapterOutputChanel.receive(</code><code class="java value">1000</code><code class="java plain">));</code></div><div class="line number6 index5 alt1"><code class="java plain">controlChannel.send(</code><code class="java keyword">new</code> <code class="java plain">GenericMessage&lt;String&gt;(</code><code class="java string">"@inboundAdapter.stop()"</code><code class="java plain">));</code></div><div class="line number7 index6 alt2"><code class="java plain">assertNull(adapterOutputChanel.receive(</code><code class="java value">1000</code><code class="java plain">));</code></div><div class="line number8 index7 alt1"><code class="java plain">}</code></div></div></td></tr></tbody></table></div></div>
<p>The test configuration looks as below,</p>
<div><div id="highlighter_374105" class="syntaxhighlighter  xml"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="xml plain">&lt;</code><code class="xml keyword">int:inbound-channel-adapter</code> <code class="xml color1">id</code><code class="xml plain">=</code><code class="xml string">"inboundAdapter"</code></div><div class="line number2 index1 alt1"><code class="xml color1">channel</code><code class="xml plain">=</code><code class="xml string">"controlbus-managed-p2p-pollable-channel"</code> <code class="xml color1">expression</code><code class="xml plain">=</code><code class="xml string">"'Hello'"</code></div><div class="line number3 index2 alt2"><code class="xml color1">auto-startup</code><code class="xml plain">=</code><code class="xml string">"false"</code><code class="xml plain">&gt;</code></div><div class="line number4 index3 alt1"><code class="xml plain">&lt;</code><code class="xml keyword">int:poller</code> <code class="xml color1">fixed-rate</code><code class="xml plain">=</code><code class="xml string">"6000"</code> <code class="xml plain">/&gt;</code></div><div class="line number5 index4 alt2"><code class="xml plain">&lt;/</code><code class="xml keyword">int:inbound-channel-adapter</code><code class="xml plain">&gt;</code></div></div></td></tr></tbody></table></div></div>
<p>If you run the “mvn test” the tests work. In the main configuration, we will be configuring actual queues and <a title="jms:inbound-channel-adapter" href="http://static.springsource.org/spring-integration/docs/2.0.0.RC2/reference/html/jms.html">jms inbound-channel-adapter</a>&nbsp;as below,</p>
<div><div id="highlighter_808401" class="syntaxhighlighter  xml"><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div><div class="line number9 index8 alt2">9</div><div class="line number10 index9 alt1">10</div><div class="line number11 index10 alt2">11</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="xml plain">&lt;</code><code class="xml keyword">int-jms:inbound-channel-adapter</code> <code class="xml color1">id</code><code class="xml plain">=</code><code class="xml string">"inboundAdapter"</code></div><div class="line number2 index1 alt1"><code class="xml color1">channel</code><code class="xml plain">=</code><code class="xml string">"controlbus-managed-p2p-pollable-channel"</code></div><div class="line number3 index2 alt2"><code class="xml color1">jms-template</code><code class="xml plain">=</code><code class="xml string">"jmsTemplate"</code><code class="xml plain">&gt;</code></div><div class="line number4 index3 alt1"><code class="xml plain">&lt;</code><code class="xml keyword">int:poller</code> <code class="xml color1">fixed-rate</code><code class="xml plain">=</code><code class="xml string">"6000"</code> <code class="xml plain">/&gt;</code></div><div class="line number5 index4 alt2"><code class="xml plain">&lt;/</code><code class="xml keyword">int-jms:inbound-channel-adapter</code><code class="xml plain">&gt;</code></div><div class="line number6 index5 alt1">&nbsp;</div><div class="line number7 index6 alt2"><code class="xml plain">&lt;</code><code class="xml keyword">int-jms:inbound-channel-adapter</code> <code class="xml color1">id</code><code class="xml plain">=</code><code class="xml string">"controlBusAdapter"</code></div><div class="line number8 index7 alt1"><code class="xml color1">channel</code><code class="xml plain">=</code><code class="xml string">"control-channel"</code></div><div class="line number9 index8 alt2"><code class="xml color1">jms-template</code><code class="xml plain">=</code><code class="xml string">"controlBusJmsTemplate"</code><code class="xml plain">&gt;</code></div><div class="line number10 index9 alt1"><code class="xml plain">&lt;</code><code class="xml keyword">int:poller</code> <code class="xml color1">fixed-rate</code><code class="xml plain">=</code><code class="xml string">"6000"</code> <code class="xml plain">/&gt;</code></div><div class="line number11 index10 alt2"><code class="xml plain">&lt;/</code><code class="xml keyword">int-jms:inbound-channel-adapter</code><code class="xml plain">&gt;</code></div></div></td></tr></tbody></table></div></div>
<p>Now when you start the component as “Run on Server” in STS IDE and post a message on<br>
MyQueue, you can see the subscribers received the messages on the console. You can issue “@inboundAdapter.stop()” on the ControlBusQueue, it will stop the inbound-channel-adapter, it will also throw java.lang.InterruptedException, it looks like a false alarm. To test if the inbound-channel-adapter is stopped, post a message on to MyQueue, the component will not process the message. Now issue “@inboundAdapter.start()” on the ControlBusQueue, it will process the earlier message and start listening for new messages.</p>
<h2>Conclusion</h2>
<p>If you notice in this blog, we can control the component to listen to message using Control Bus.&nbsp; The other way to do the same is by <a title="Spring Integration Jms Mbean Configuration" href="https://krishnasblog.com/2012/09/25/spring-integration-jms-mbean-configuration/">using MBean as in this example</a>.</p>
<p>I hope this blog helped you.</p>
					</div><!-- .entry-content -->
		
		<footer class="entry-meta">
			This entry was posted in <a href="https://krishnasblog.com/category/java/spring/spring-integration/" rel="category tag">Spring Integration</a> and tagged <a href="./Spring Integration   Krishna's Blog_files/Spring Integration   Krishna's Blog.htm" rel="tag">Spring Integration</a> on <a href="https://krishnasblog.com/2012/10/21/control-bus-pattern-with-spring-integration-and-jms/" title="2:19 am" rel="bookmark"><time class="entry-date" datetime="2012-10-21T02:19:41+00:00">October 21, 2012</time></a><span class="by-author"> by <span class="author vcard"><a class="url fn n" href="https://krishnasblog.com/author/praskrishna/" title="View all posts by Krishna" rel="author">Krishna</a></span></span>.								</footer><!-- .entry-meta -->
	</article><!-- #post -->
		<nav id="nav-below" class="navigation" role="navigation">
			<h3 class="assistive-text">Post navigation</h3>
			<div class="nav-previous"><a href="https://krishnasblog.com/tag/spring-integration/page/2/"><span class="meta-nav">←</span> Older posts</a></div>
			<div class="nav-next"></div>
		</nav><!-- .navigation -->
	
		
		<span class="infinite-loader" style="display: none;"><div class="spinner" role="progressbar" style="position: relative; width: 0px; z-index: 2000000000; left: 17px; top: 14px;"><div style="position: absolute; top: -1px; opacity: 0.25; -webkit-animation: opacity-60-25-0-8 0.7692307692307692s linear infinite;"><div style="position: absolute; width: 7px; height: 3px; background-color: rgb(0, 0, 0); box-shadow: rgba(0, 0, 0, 0.0980392) 0px 0px 1px; -webkit-transform-origin: 0% 50%; -webkit-transform: rotate(0deg) translate(5px, 0px); border-top-left-radius: 1px; border-top-right-radius: 1px; border-bottom-right-radius: 1px; border-bottom-left-radius: 1px; background-position: initial initial; background-repeat: initial initial;"></div></div><div style="position: absolute; top: -1px; opacity: 0.25; -webkit-animation: opacity-60-25-1-8 0.7692307692307692s linear infinite;"><div style="position: absolute; width: 7px; height: 3px; background-color: rgb(0, 0, 0); box-shadow: rgba(0, 0, 0, 0.0980392) 0px 0px 1px; -webkit-transform-origin: 0% 50%; -webkit-transform: rotate(45deg) translate(5px, 0px); border-top-left-radius: 1px; border-top-right-radius: 1px; border-bottom-right-radius: 1px; border-bottom-left-radius: 1px; background-position: initial initial; background-repeat: initial initial;"></div></div><div style="position: absolute; top: -1px; opacity: 0.25; -webkit-animation: opacity-60-25-2-8 0.7692307692307692s linear infinite;"><div style="position: absolute; width: 7px; height: 3px; background-color: rgb(0, 0, 0); box-shadow: rgba(0, 0, 0, 0.0980392) 0px 0px 1px; -webkit-transform-origin: 0% 50%; -webkit-transform: rotate(90deg) translate(5px, 0px); border-top-left-radius: 1px; border-top-right-radius: 1px; border-bottom-right-radius: 1px; border-bottom-left-radius: 1px; background-position: initial initial; background-repeat: initial initial;"></div></div><div style="position: absolute; top: -1px; opacity: 0.25; -webkit-animation: opacity-60-25-3-8 0.7692307692307692s linear infinite;"><div style="position: absolute; width: 7px; height: 3px; background-color: rgb(0, 0, 0); box-shadow: rgba(0, 0, 0, 0.0980392) 0px 0px 1px; -webkit-transform-origin: 0% 50%; -webkit-transform: rotate(135deg) translate(5px, 0px); border-top-left-radius: 1px; border-top-right-radius: 1px; border-bottom-right-radius: 1px; border-bottom-left-radius: 1px; background-position: initial initial; background-repeat: initial initial;"></div></div><div style="position: absolute; top: -1px; opacity: 0.25; -webkit-animation: opacity-60-25-4-8 0.7692307692307692s linear infinite;"><div style="position: absolute; width: 7px; height: 3px; background-color: rgb(0, 0, 0); box-shadow: rgba(0, 0, 0, 0.0980392) 0px 0px 1px; -webkit-transform-origin: 0% 50%; -webkit-transform: rotate(180deg) translate(5px, 0px); border-top-left-radius: 1px; border-top-right-radius: 1px; border-bottom-right-radius: 1px; border-bottom-left-radius: 1px; background-position: initial initial; background-repeat: initial initial;"></div></div><div style="position: absolute; top: -1px; opacity: 0.25; -webkit-animation: opacity-60-25-5-8 0.7692307692307692s linear infinite;"><div style="position: absolute; width: 7px; height: 3px; background-color: rgb(0, 0, 0); box-shadow: rgba(0, 0, 0, 0.0980392) 0px 0px 1px; -webkit-transform-origin: 0% 50%; -webkit-transform: rotate(225deg) translate(5px, 0px); border-top-left-radius: 1px; border-top-right-radius: 1px; border-bottom-right-radius: 1px; border-bottom-left-radius: 1px; background-position: initial initial; background-repeat: initial initial;"></div></div><div style="position: absolute; top: -1px; opacity: 0.25; -webkit-animation: opacity-60-25-6-8 0.7692307692307692s linear infinite;"><div style="position: absolute; width: 7px; height: 3px; background-color: rgb(0, 0, 0); box-shadow: rgba(0, 0, 0, 0.0980392) 0px 0px 1px; -webkit-transform-origin: 0% 50%; -webkit-transform: rotate(270deg) translate(5px, 0px); border-top-left-radius: 1px; border-top-right-radius: 1px; border-bottom-right-radius: 1px; border-bottom-left-radius: 1px; background-position: initial initial; background-repeat: initial initial;"></div></div><div style="position: absolute; top: -1px; opacity: 0.25; -webkit-animation: opacity-60-25-7-8 0.7692307692307692s linear infinite;"><div style="position: absolute; width: 7px; height: 3px; background-color: rgb(0, 0, 0); box-shadow: rgba(0, 0, 0, 0.0980392) 0px 0px 1px; -webkit-transform-origin: 0% 50%; -webkit-transform: rotate(315deg) translate(5px, 0px); border-top-left-radius: 1px; border-top-right-radius: 1px; border-bottom-right-radius: 1px; border-bottom-left-radius: 1px; background-position: initial initial; background-repeat: initial initial;"></div></div></div></span><div class="infinite-wrap infinite-view-1 is--replaced" id="infinite-view-1" data-page-num="1" style="min-height: 18717px;"></div></div><!-- #content -->
	</section><!-- #primary -->


			<div id="secondary" class="widget-area" role="complementary">
						<aside id="search-2" class="widget widget_search"><form role="search" method="get" id="searchform" class="searchform" action="https://krishnasblog.com/">
				<div>
					<label class="screen-reader-text" for="s">Search for:</label>
					<input type="text" value="" name="s" id="s">
					<input type="submit" id="searchsubmit" value="Search">
				</div>
			</form></aside><aside id="categories-2" class="widget widget_categories"><h3 class="widget-title">Categories</h3>		<ul>
	<li class="cat-item cat-item-1715866"><a href="https://krishnasblog.com/category/cloud-computing/">Cloud Computing</a> (4)
</li>
	<li class="cat-item cat-item-215429"><a href="https://krishnasblog.com/category/grails/">Grails</a> (2)
</li>
	<li class="cat-item cat-item-20999524"><a href="https://krishnasblog.com/category/html5-canvas/">HTML5 Canvas</a> (1)
</li>
	<li class="cat-item cat-item-45721567"><a href="https://krishnasblog.com/category/ios-programming/">iOS Programming</a> (3)
</li>
	<li class="cat-item cat-item-1017"><a href="https://krishnasblog.com/category/java/">Java</a> (61)
<ul class="children">
	<li class="cat-item cat-item-15968671"><a href="https://krishnasblog.com/category/java/bigdata/">BigData</a> (8)
</li>
	<li class="cat-item cat-item-51757"><a href="https://krishnasblog.com/category/java/bpm/">BPM</a> (2)
</li>
	<li class="cat-item cat-item-310909"><a href="https://krishnasblog.com/category/java/drools/">Drools</a> (1)
</li>
	<li class="cat-item cat-item-3858"><a href="https://krishnasblog.com/category/java/play/">Play</a> (2)
</li>
	<li class="cat-item cat-item-9486"><a href="https://krishnasblog.com/category/java/spring/" title="Spring">Spring</a> (40)
	<ul class="children">
	<li class="cat-item cat-item-91482705"><a href="https://krishnasblog.com/category/java/spring/spring-boot/">Spring Boot</a> (2)
</li>
	<li class="cat-item cat-item-5915024"><a href="https://krishnasblog.com/category/java/spring/spring-integration/">Spring Integration</a> (14)
</li>
	<li class="cat-item cat-item-465938"><a href="https://krishnasblog.com/category/java/spring/spring-mvc/">Spring MVC</a> (11)
</li>
	<li class="cat-item cat-item-3428272"><a href="https://krishnasblog.com/category/java/spring/spring-security/" title="Spring Security">Spring Security</a> (7)
</li>
	<li class="cat-item cat-item-535108"><a href="https://krishnasblog.com/category/java/spring/spring-web-flow/">Spring Web Flow</a> (2)
</li>
	</ul>
</li>
	<li class="cat-item cat-item-116650247"><a href="https://krishnasblog.com/category/java/webscrapping/">Webscrapping</a> (4)
</li>
</ul>
</li>
	<li class="cat-item cat-item-457"><a href="https://krishnasblog.com/category/javascript/">Javascript</a> (4)
</li>
	<li class="cat-item cat-item-40978"><a href="https://krishnasblog.com/category/machine-learning/">Machine Learning</a> (1)
</li>
	<li class="cat-item cat-item-1961368"><a href="https://krishnasblog.com/category/physics-engine/">Physics Engine</a> (1)
</li>
	<li class="cat-item cat-item-312256"><a href="https://krishnasblog.com/category/scala/">Scala</a> (10)
</li>
	<li class="cat-item cat-item-12"><a href="https://krishnasblog.com/category/testing/" title="Test Automation and other related topics">Testing</a> (1)
</li>
		</ul>
</aside><aside id="top-posts-2" class="widget widget_top-posts"><h3 class="widget-title">Top Posts &amp; Pages</h3><ul>				<li>
										<a href="https://krishnasblog.com/2013/02/21/junit-testing-of-spring-mvc-application-testing-dao-layer/" class="bump-view" data-bump-view="tp">
						JUnit testing of Spring MVC application: Testing DAO layer					</a>
									</li>
							<li>
										<a href="https://krishnasblog.com/2013/02/11/sample-of-spring-security-and-cas-single-signon/" class="bump-view" data-bump-view="tp">
						Sample of Spring Security and CAS (Single Signon)					</a>
									</li>
							<li>
										<a href="https://krishnasblog.com/2013/02/21/junit-testing-of-spring-mvc-application-testing-service-layer/" class="bump-view" data-bump-view="tp">
						JUnit testing of Spring MVC application: Testing Service layer					</a>
									</li>
							<li>
										<a href="https://krishnasblog.com/2013/02/22/junit-testing-of-spring-mvc-application-introduction/" class="bump-view" data-bump-view="tp">
						JUnit testing of Spring MVC application - Introduction					</a>
									</li>
							<li>
										<a href="https://krishnasblog.com/2012/10/15/junit-testing-rest-services-and-spring-mvc/" class="bump-view" data-bump-view="tp">
						JUnit testing REST Services and Spring MVC					</a>
									</li>
			</ul></aside><aside id="wp_tag_cloud-2" class="widget wp_widget_tag_cloud"><h3 class="widget-title">GoSmarter’s Tags</h3><div style="overflow:hidden"><a href="https://krishnasblog.com/tag/grails/" class="tag-link-215429" title="2 topics" style="font-size: 10.709677419355pt;">Grails</a>
<a href="https://krishnasblog.com/tag/hadoop/" class="tag-link-3251196" title="5 topics" style="font-size: 15.225806451613pt;">Hadoop</a>
<a href="https://krishnasblog.com/tag/ios-programming/" class="tag-link-45721567" title="3 topics" style="font-size: 12.516129032258pt;">iOS Programming</a>
<a href="https://krishnasblog.com/tag/latest-in-java/" class="tag-link-121150985" title="7 topics" style="font-size: 17.032258064516pt;">Latest in Java</a>
<a href="https://krishnasblog.com/tag/latest-in-software/" class="tag-link-143889767" title="7 topics" style="font-size: 17.032258064516pt;">Latest in Software</a>
<a href="https://krishnasblog.com/tag/scala/" class="tag-link-312256" title="10 topics" style="font-size: 19.139784946237pt;">Scala</a>
<a href="https://krishnasblog.com/tag/spring/" class="tag-link-9486" title="1 topic" style="font-size: 8pt;">Spring</a>
<a href="./Spring Integration   Krishna's Blog_files/Spring Integration   Krishna's Blog.htm" class="tag-link-5915024" title="14 topics" style="font-size: 21.247311827957pt;">Spring Integration</a>
<a href="https://krishnasblog.com/tag/spring-mvc/" class="tag-link-465938" title="16 topics" style="font-size: 22pt;">Spring MVC</a>
<a href="https://krishnasblog.com/tag/spring-security/" class="tag-link-3428272" title="9 topics" style="font-size: 18.537634408602pt;">Spring Security</a>
<a href="https://krishnasblog.com/tag/test-driven-development/" class="tag-link-78073" title="5 topics" style="font-size: 15.225806451613pt;">Test Driven Development</a></div></aside><aside id="archives-2" class="widget widget_archive"><h3 class="widget-title">Archives</h3>		<ul>
			<li><a href="https://krishnasblog.com/2016/01/">January 2016</a>&nbsp;(1)</li>
	<li><a href="https://krishnasblog.com/2015/07/">July 2015</a>&nbsp;(2)</li>
	<li><a href="https://krishnasblog.com/2015/03/">March 2015</a>&nbsp;(1)</li>
	<li><a href="https://krishnasblog.com/2015/02/">February 2015</a>&nbsp;(1)</li>
	<li><a href="https://krishnasblog.com/2014/02/">February 2014</a>&nbsp;(2)</li>
	<li><a href="https://krishnasblog.com/2014/01/">January 2014</a>&nbsp;(2)</li>
	<li><a href="https://krishnasblog.com/2013/09/">September 2013</a>&nbsp;(1)</li>
	<li><a href="https://krishnasblog.com/2013/03/">March 2013</a>&nbsp;(8)</li>
	<li><a href="https://krishnasblog.com/2013/02/">February 2013</a>&nbsp;(13)</li>
	<li><a href="https://krishnasblog.com/2013/01/">January 2013</a>&nbsp;(3)</li>
	<li><a href="https://krishnasblog.com/2012/12/">December 2012</a>&nbsp;(10)</li>
	<li><a href="https://krishnasblog.com/2012/11/">November 2012</a>&nbsp;(7)</li>
	<li><a href="https://krishnasblog.com/2012/10/">October 2012</a>&nbsp;(11)</li>
	<li><a href="https://krishnasblog.com/2012/09/">September 2012</a>&nbsp;(9)</li>
	<li><a href="https://krishnasblog.com/2012/08/">August 2012</a>&nbsp;(1)</li>
	<li><a href="https://krishnasblog.com/2012/07/">July 2012</a>&nbsp;(1)</li>
	<li><a href="https://krishnasblog.com/2012/06/">June 2012</a>&nbsp;(4)</li>
	<li><a href="https://krishnasblog.com/2012/05/">May 2012</a>&nbsp;(9)</li>
		</ul>
		</aside><aside id="meta-3" class="widget widget_meta"><h3 class="widget-title">Gosmarter meta</h3>			<ul>
			<li><a href="https://wordpress.com/start?ref=wplogin">Register</a></li>			<li><a href="https://krishnasblog1068.wordpress.com/wp-login.php">Log in</a></li>
			<li><a href="https://krishnasblog.com/feed/">Entries <abbr title="Really Simple Syndication">RSS</abbr></a></li>
			<li><a href="https://krishnasblog.com/comments/feed/">Comments <abbr title="Really Simple Syndication">RSS</abbr></a></li>
			<li><a href="https://wordpress.com/" title="Powered by WordPress, state-of-the-art semantic personal publishing platform.">WordPress.com</a></li>			</ul>
			</aside>		</div><!-- #secondary -->
		</div><!-- #main .wrapper -->
	<footer id="colophon" role="contentinfo">
		<div class="site-info">
			<a href="https://wordpress.com/themes/twentytwelve/" title="Learn more about this theme">The Twenty Twelve Theme</a>.			<a href="https://wordpress.com/?ref=footer_blog">Blog at WordPress.com.</a>
		</div><!-- .site-info -->
	</footer><!-- #colophon -->
</div><!-- #page -->

		<script type="text/javascript">
		//<![CDATA[
		var infiniteScroll = {"settings":{"id":"content","ajaxurl":"https:\/\/krishnasblog.com\/?infinity=scrolling","type":"scroll","wrapper":true,"wrapper_class":"infinite-wrap","footer":"page","click_handle":"1","text":"Older posts","totop":"Scroll back to top","currentday":"21.10.12","order":"DESC","scripts":[],"styles":[],"google_analytics":false,"offset":0,"history":{"host":"krishnasblog.com","path":"\/tag\/spring-integration\/page\/%d\/","use_trailing_slashes":true,"parameters":""},"query_args":{"tag":"spring-integration","error":"","m":"","p":0,"post_parent":"","subpost":"","subpost_id":"","attachment":"","attachment_id":0,"name":"","static":"","pagename":"","page_id":0,"second":"","minute":"","hour":"","day":0,"monthnum":0,"year":0,"w":0,"category_name":"","cat":"","tag_id":5915024,"author":"","author_name":"","feed":"","tb":"","paged":0,"comments_popup":"","meta_key":"","meta_value":"","preview":"","s":"","sentence":"","title":"","fields":"","menu_order":"","category__in":[],"category__not_in":[],"category__and":[],"post__in":[],"post__not_in":[],"post_name__in":[],"tag__in":[],"tag__not_in":[],"tag__and":[],"tag_slug__in":["spring-integration"],"tag_slug__and":[],"post_parent__in":[],"post_parent__not_in":[],"author__in":[],"author__not_in":[],"posts_per_page":7,"ignore_sticky_posts":false,"suppress_filters":false,"cache_results":false,"update_post_term_cache":true,"update_post_meta_cache":true,"post_type":"","nopaging":false,"comments_per_page":"50","no_found_rows":false,"order":"DESC"},"last_post_date":"2012-10-21 02:19:41","stats":"blog=35510357&v=wpcom&tz=0&user_id=0&subd=krishnasblog1068&x_pagetype=infinite"}};
		//]]>
		</script>
		<!-- wpcom_wp_footer -->
<script type="text/javascript" src="./Spring Integration   Krishna's Blog_files/gprofiles.js"></script>
<script type="text/javascript">
/* <![CDATA[ */
var WPGroHo = {"my_hash":""};
/* ]]> */
</script>
<script type="text/javascript" src="./Spring Integration   Krishna's Blog_files/wpgroho.js"></script>

	<script>
		//initialize and attach hovercards to all gravatars
		jQuery( document ).ready( function( $ ) {

			if (typeof Gravatar === "undefined"){
				return;
			}

			if ( typeof Gravatar.init !== "function" ) {
				return;
			}			

			Gravatar.profile_cb = function( hash, id ) {
				WPGroHo.syncProfileData( hash, id );
			};
			Gravatar.my_hash = WPGroHo.my_hash;
			Gravatar.init( 'body', '#wp-admin-bar-my-account' );
		});
	</script>

		<div style="display:none">
	</div>
		<div id="infinite-footer" style="bottom: 0px;">
			<div class="container" style="width: 1040px;">
				<div class="blog-info">
					<a id="infinity-blog-title" href="https://krishnasblog.com/" rel="home" title="Scroll back to top">
						Krishna's Blog					</a>
				</div>
				<div class="blog-credits">
					<a href="https://wordpress.com/?ref=footer_website">Create a free website or blog at WordPress.com.</a> <a href="https://wordpress.com/themes/twentytwelve/" title="Learn more about this theme">The Twenty Twelve Theme</a>.				</div>
			</div>
		</div><!-- #infinite-footer -->
		
	<div id="bit" class="loggedout-follow-normal" style="bottom: -300px;">
		<a class="bsub" href="javascript:void(0)"><span id="bsub-text">Follow</span></a>
		<div id="bitsubscribe">

					<h3><label for="loggedout-follow-field">Follow “Krishna's Blog”</label></h3>

			<form action="https://subscribe.wordpress.com/" method="post" accept-charset="utf-8" id="loggedout-follow">
			<p>Get every new post delivered to your Inbox.</p>

			<p id="loggedout-follow-error" style="display: none;"></p>

						<p class="bit-follow-count">Join 36 other followers</p>
			<p><input type="email" name="email" placeholder="Enter your email address" id="loggedout-follow-field"></p>

			<input type="hidden" name="action" value="subscribe">
			<input type="hidden" name="blog_id" value="35510357">
			<input type="hidden" name="source" value="https://krishnasblog.com/tag/spring-integration/">
			<input type="hidden" name="sub-type" value="loggedout-follow">

			<input type="hidden" id="_wpnonce" name="_wpnonce" value="19546f5ca2"><input type="hidden" name="_wp_http_referer" value="/tag/spring-integration/">
			<p id="bsub-subscribe-button"><input type="submit" value="Sign me up"></p>
			</form>
					<div id="bsub-credit"><a href="https://wordpress.com/?ref=lof">Build a website with WordPress.com</a></div>
		</div><!-- #bitsubscribe -->
	</div><!-- #bit -->

	<div id="carousel-reblog-box">
		<form action="" name="carousel-reblog">
			<textarea id="carousel-reblog-content" name="carousel-reblog-content" placeholder="Add your thoughts here... (optional)"></textarea>
			<label for="carousel-reblog-to-blog-id" id="carousel-reblog-lblogid">Post to</label>
			<select name="carousel-reblog-to-blog-id" id="carousel-reblog-to-blog-id">
						</select>

			<div class="submit">
				<span class="canceltext"><a href="" class="cancel">Cancel</a></span>
				<input type="submit" name="carousel-reblog-submit" class="button" id="carousel-reblog-submit" value="Reblog Post">
				<input type="hidden" id="carousel-reblog-blog-id" value="35510357">
				<input type="hidden" id="carousel-reblog-blog-url" value="https://krishnasblog.com">
				<input type="hidden" id="carousel-reblog-blog-title" value="Krishna&#39;s Blog">
				<input type="hidden" id="carousel-reblog-post-url" value="">
				<input type="hidden" id="carousel-reblog-post-title" value="">
			</div>

			<input type="hidden" id="_wpnonce" name="_wpnonce" value="79eb3d2946"><input type="hidden" name="_wp_http_referer" value="/tag/spring-integration/">		</form>

		<div class="arrow"></div>
	</div>
<script type="text/javascript" src="./Spring Integration   Krishna's Blog_files/saved_resource(3)"></script>
<script type="text/javascript">
	(function(){
		var corecss = document.createElement('link');
		var themecss = document.createElement('link');
		var corecssurl = "https://s0.wp.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shCore.css?ver=3.0.9b";
		if ( corecss.setAttribute ) {
				corecss.setAttribute( "rel", "stylesheet" );
				corecss.setAttribute( "type", "text/css" );
				corecss.setAttribute( "href", corecssurl );
		} else {
				corecss.rel = "stylesheet";
				corecss.href = corecssurl;
		}
		document.getElementsByTagName("head")[0].insertBefore( corecss, document.getElementById("syntaxhighlighteranchor") );
		var themecssurl = "https://s0.wp.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shThemeDefault.css?m=1363304414g&amp;ver=3.0.9b";
		if ( themecss.setAttribute ) {
				themecss.setAttribute( "rel", "stylesheet" );
				themecss.setAttribute( "type", "text/css" );
				themecss.setAttribute( "href", themecssurl );
		} else {
				themecss.rel = "stylesheet";
				themecss.href = themecssurl;
		}
		//document.getElementById("syntaxhighlighteranchor").appendChild(themecss);
		document.getElementsByTagName("head")[0].insertBefore( themecss, document.getElementById("syntaxhighlighteranchor") );
	})();
	SyntaxHighlighter.config.strings.expandSource = '+ expand source';
	SyntaxHighlighter.config.strings.help = '?';
	SyntaxHighlighter.config.strings.alert = 'SyntaxHighlighter\n\n';
	SyntaxHighlighter.config.strings.noBrush = 'Can\'t find brush for: ';
	SyntaxHighlighter.config.strings.brushNotHtmlScript = 'Brush wasn\'t configured for html-script option: ';
	SyntaxHighlighter.defaults['pad-line-numbers'] = false;
	SyntaxHighlighter.defaults['toolbar'] = false;
	SyntaxHighlighter.all();
</script>
<link rel="stylesheet" id="all-css-0" href="./Spring Integration   Krishna's Blog_files/jetpack-carousel.css" type="text/css" media="all">
<!--[if lte IE 8]>
<link rel='stylesheet' id='jetpack-carousel-ie8fix-css'  href='https://s1.wp.com/wp-content/mu-plugins/carousel/jetpack-carousel-ie8fix.css?m=1412618825g&#038;ver=20121024' type='text/css' media='all' />
<![endif]-->
<link rel="stylesheet" id="all-css-2" href="./Spring Integration   Krishna's Blog_files/tiled-gallery.css" type="text/css" media="all">
<script type="text/javascript">
/* <![CDATA[ */
var JetpackEmojiSettings = {"base_url":"https:\/\/s0.wp.com\/wp-content\/mu-plugins\/emoji\/twemoji\/"};
/* ]]> */
</script>
<script type="text/javascript">
/* <![CDATA[ */
var jetpackCarouselStrings = {"widths":[370,700,1000,1200,1400,2000],"is_logged_in":"","lang":"en","ajaxurl":"https:\/\/krishnasblog.com\/wp-admin\/admin-ajax.php","nonce":"40dd23aac4","display_exif":"1","display_geo":"1","background_color":"black","comment":"Comment","post_comment":"Post Comment","write_comment":"Write a Comment...","loading_comments":"Loading Comments...","download_original":"View full size <span class=\"photo-size\">{0}<span class=\"photo-size-times\">\u00d7<\/span>{1}<\/span>","no_comment_text":"Please be sure to submit some text with your comment.","no_comment_email":"Please provide an email address to comment.","no_comment_author":"Please provide your name to comment.","comment_post_error":"Sorry, but there was an error posting your comment. Please try again later.","comment_approved":"Your comment was approved.","comment_unapproved":"Your comment is in moderation.","camera":"Camera","aperture":"Aperture","shutter_speed":"Shutter Speed","focal_length":"Focal Length","comment_registration":"0","require_name_email":"1","login_url":"https:\/\/krishnasblog1068.wordpress.com\/wp-login.php?redirect_to=https%3A%2F%2Fkrishnasblog.com%2F2012%2F10%2F21%2Fcontrol-bus-pattern-with-spring-integration-and-jms%2F","local_comments_commenting_as":"<fieldset><label for=\"email\">Email (Required)<\/label> <input type=\"text\" name=\"email\" class=\"jp-carousel-comment-form-field jp-carousel-comment-form-text-field\" id=\"jp-carousel-comment-form-email-field\" \/><\/fieldset><fieldset><label for=\"author\">Name (Required)<\/label> <input type=\"text\" name=\"author\" class=\"jp-carousel-comment-form-field jp-carousel-comment-form-text-field\" id=\"jp-carousel-comment-form-author-field\" \/><\/fieldset><fieldset><label for=\"url\">Website<\/label> <input type=\"text\" name=\"url\" class=\"jp-carousel-comment-form-field jp-carousel-comment-form-text-field\" id=\"jp-carousel-comment-form-url-field\" \/><\/fieldset>","reblog":"Reblog","reblogged":"Reblogged","reblog_add_thoughts":"Add your thoughts here... (optional)","reblogging":"Reblogging...","post_reblog":"Post Reblog","stats_query_args":"blog=35510357&v=wpcom&tz=0&user_id=0&subd=krishnasblog1068","is_public":"1","reblog_enabled":""};
var jetpackCarouselStrings = {"widths":[370,700,1000,1200,1400,2000],"is_logged_in":"","lang":"en","ajaxurl":"https:\/\/krishnasblog.com\/wp-admin\/admin-ajax.php","nonce":"40dd23aac4","display_exif":"1","display_geo":"1","background_color":"black","comment":"Comment","post_comment":"Post Comment","write_comment":"Write a Comment...","loading_comments":"Loading Comments...","download_original":"View full size <span class=\"photo-size\">{0}<span class=\"photo-size-times\">\u00d7<\/span>{1}<\/span>","no_comment_text":"Please be sure to submit some text with your comment.","no_comment_email":"Please provide an email address to comment.","no_comment_author":"Please provide your name to comment.","comment_post_error":"Sorry, but there was an error posting your comment. Please try again later.","comment_approved":"Your comment was approved.","comment_unapproved":"Your comment is in moderation.","camera":"Camera","aperture":"Aperture","shutter_speed":"Shutter Speed","focal_length":"Focal Length","comment_registration":"0","require_name_email":"1","login_url":"https:\/\/krishnasblog1068.wordpress.com\/wp-login.php?redirect_to=https%3A%2F%2Fkrishnasblog.com%2F2012%2F10%2F21%2Fcontrol-bus-pattern-with-spring-integration-and-jms%2F","local_comments_commenting_as":"<fieldset><label for=\"email\">Email (Required)<\/label> <input type=\"text\" name=\"email\" class=\"jp-carousel-comment-form-field jp-carousel-comment-form-text-field\" id=\"jp-carousel-comment-form-email-field\" \/><\/fieldset><fieldset><label for=\"author\">Name (Required)<\/label> <input type=\"text\" name=\"author\" class=\"jp-carousel-comment-form-field jp-carousel-comment-form-text-field\" id=\"jp-carousel-comment-form-author-field\" \/><\/fieldset><fieldset><label for=\"url\">Website<\/label> <input type=\"text\" name=\"url\" class=\"jp-carousel-comment-form-field jp-carousel-comment-form-text-field\" id=\"jp-carousel-comment-form-url-field\" \/><\/fieldset>","reblog":"Reblog","reblogged":"Reblogged","reblog_add_thoughts":"Add your thoughts here... (optional)","reblogging":"Reblogging...","post_reblog":"Post Reblog","stats_query_args":"blog=35510357&v=wpcom&tz=0&user_id=0&subd=krishnasblog1068","is_public":"1","reblog_enabled":""};
/* ]]> */
</script>
<script type="text/javascript" src="./Spring Integration   Krishna's Blog_files/saved_resource(4)"></script>
<script type="text/javascript" src="./Spring Integration   Krishna's Blog_files/widgets.js"></script>
<script type="text/javascript" src="./Spring Integration   Krishna's Blog_files/saved_resource(5)"></script>
<script type="text/javascript">
// <![CDATA[
(function() {
try{
  if ( window.external &&'msIsSiteMode' in window.external) {
    if (window.external.msIsSiteMode()) {
      var jl = document.createElement('script');
      jl.type='text/javascript';
      jl.async=true;
      jl.src='/wp-content/plugins/ie-sitemode/custom-jumplist.php';
      var s = document.getElementsByTagName('script')[0];
      s.parentNode.insertBefore(jl, s);
    }
  }
}catch(e){}
})();
// ]]>
</script><script type="text/javascript">
			jQuery.extend( infiniteScroll.settings.scripts, ["jquery","jquery-core","jquery-migrate","mobile-useragent-info","postmessage","jquery_inview","jetpack_resize","loggedout-subscribe","spin","jquery.spin","grofiles-cards","wpgroho","syntaxhighlighter-core","syntaxhighlighter-brush-xml","syntaxhighlighter-brush-plain","syntaxhighlighter-brush-java","devicepx","the-neverending-homepage","twentytwelve-navigation","twemoji","jetpack-emoji","jetpack-emoji-init","swfobject","videopress","jetpack-carousel","twitter-widgets","twitter-widgets-infinity","twitter-widgets-pending","tiled-gallery"] );
			jQuery.extend( infiniteScroll.settings.styles, ["smileyproject","jetpack_likes","loggedout-subscribe","the-neverending-homepage","wpcom-core-compat-playlist-styles","mp6hacks","wpcom-bbpress2-staff-css","twentytwelve-style","twentytwelve-wpcom-style","jetpack-emoji-css","noticons","geo-location-flair","reblogging","infinity-twentytwelve","h4-global","widget-grid-and-list","twentytwelve-fonts","twentytwelve-ie","jetpack-carousel","tiled-gallery","jetpack-carousel-ie8fix"] );
		</script><script src="./Spring Integration   Krishna's Blog_files/w.js" type="text/javascript" async="" defer=""></script>
<script type="text/javascript">
_tkq = window._tkq || [];
_stq = window._stq || [];
_tkq.push(['storeContext', {'blog_id':'35510357','blog_tz':'0','user_lang':'en','blog_lang':'en','user_id':'0'}]);
_stq.push(['view', {'blog':'35510357','v':'wpcom','tz':'0','user_id':'0','subd':'krishnasblog1068'}]);
_stq.push(['extra', {'crypt':'UE40eW5QN0p8M2Y/RE1LVmwrVi5vQS5fVFtfdHBbPyw1VXIrU3hWLHhzVndTdktBX0ddJnpXRjVaOTd6fj1YMX4ydzRUSk0wbVRfODlnNUZzflpnbkZvTEZCZThbYWgrTltdfm9zN3RnTVhvW0NGfi9uaSt6QUtwaWUrN1UsXUVHQltdYj9SMm4xckxzaz0/ZkJkUWpvSi1IZG4teUtJXyxbc3FJRk1qVnV0dCV6dktYM0RHcit6fmc3Vm43a2IuSl1UTUVZcXFubi91Y2lrNiswZkRZTEptRlNuLy14R1txaVIrcU5mMGQzVWQ4VEpJS1NETSxfVEc4Z1tXZCZycT1dMlUlLD95cVVmLzVWL1c4VFVoVmU9LnVxeT9yNGQ5V0kyYXdUTmxZcA=='}]);
_stq.push([ 'clickTrackerInit', '35510357', '0' ]);
	</script>
<noscript>&lt;img src="https://pixel.wp.com/b.gif?v=noscript" style="height:0px;width:0px;overflow:hidden" alt="" /&gt;</noscript>
<script>
if ( 'object' === typeof wpcom_mobile_user_agent_info ) {

	wpcom_mobile_user_agent_info.init();
	var mobileStatsQueryString = "";
	
	if( false !== wpcom_mobile_user_agent_info.matchedPlatformName )
		mobileStatsQueryString += "&x_" + 'mobile_platforms' + '=' + wpcom_mobile_user_agent_info.matchedPlatformName;
	
	if( false !== wpcom_mobile_user_agent_info.matchedUserAgentName )
		mobileStatsQueryString += "&x_" + 'mobile_devices' + '=' + wpcom_mobile_user_agent_info.matchedUserAgentName;
	
	if( wpcom_mobile_user_agent_info.isIPad() )
		mobileStatsQueryString += "&x_" + 'ipad_views' + '=' + 'views';

	if( "" != mobileStatsQueryString ) {
		new Image().src = document.location.protocol + '//pixel.wp.com/g.gif?v=wpcom-no-pv' + mobileStatsQueryString + '&baba=' + Math.random();
	}
	
}
</script>
<img src="./Spring Integration   Krishna's Blog_files/g.gif" id="wpstats"><iframe id="rufous-sandbox" scrolling="no" frameborder="0" allowtransparency="true" allowfullscreen="true" style="position: absolute; visibility: hidden; display: none; width: 0px; height: 0px; padding: 0px; border: none;"></iframe></body></html>