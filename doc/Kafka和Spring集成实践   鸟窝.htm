<!DOCTYPE html>
<!-- saved from url=(0066)http://colobu.com/2014/11/19/kafka-spring-integration-in-practice/ -->
<html class=""><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><script src="./Kafka和Spring集成实践   鸟窝_files/hm.js"></script>
  <meta charset="utf-8">
  
  <title>Kafka和Spring集成实践 | 鸟窝</title>
  <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
  <meta name="description" content="本文以单机的环境演示如何将Kafka和Spring集成。单机的环境最容易搭建， 并且只需在自己的PC上运行即可， 不需要很多的硬件环境，便于学习。 况且，本文的目的不是搭建ZooKeeper的集群环境， 而是重点介绍Kafka和Spring的应用。具体的软件环境如下：

OS: CentOS 6.4
Zookepper： zookeeper-3.4.6
Kafka： kafka_2.9.1-0.8">
<meta property="og:type" content="article">
<meta property="og:title" content="Kafka和Spring集成实践">
<meta property="og:url" content="http://colobu.com/2014/11/19/kafka-spring-integration-in-practice/">
<meta property="og:site_name" content="鸟窝">
<meta property="og:description" content="本文以单机的环境演示如何将Kafka和Spring集成。单机的环境最容易搭建， 并且只需在自己的PC上运行即可， 不需要很多的硬件环境，便于学习。 况且，本文的目的不是搭建ZooKeeper的集群环境， 而是重点介绍Kafka和Spring的应用。具体的软件环境如下：

OS: CentOS 6.4
Zookepper： zookeeper-3.4.6
Kafka： kafka_2.9.1-0.8">
<meta name="twitter:card" content="summary">
<meta name="twitter:title" content="Kafka和Spring集成实践">
<meta name="twitter:description" content="本文以单机的环境演示如何将Kafka和Spring集成。单机的环境最容易搭建， 并且只需在自己的PC上运行即可， 不需要很多的硬件环境，便于学习。 况且，本文的目的不是搭建ZooKeeper的集群环境， 而是重点介绍Kafka和Spring的应用。具体的软件环境如下：

OS: CentOS 6.4
Zookepper： zookeeper-3.4.6
Kafka： kafka_2.9.1-0.8">

  
    <link rel="alternative" href="http://colobu.com/atom.xml" title="鸟窝" type="application/atom+xml">
  
  
    <link rel="icon" href="http://colobu.com/favicon.png">
  
  <link rel="stylesheet" href="./Kafka和Spring集成实践   鸟窝_files/style.css" type="text/css">

  <link href="http://cdn.staticfile.org/font-awesome/4.2.0/css/font-awesome.css" rel="stylesheet">
  
  <link rel="stylesheet" href="./Kafka和Spring集成实践   鸟窝_files/jquery.fancybox.css" media="screen" type="text/css">
  
  <link rel="stylesheet" href="./Kafka和Spring集成实践   鸟窝_files/animate.min.css" media="screen" type="text/css">
  <!--[if lt IE 9]><script src="//cdn.staticfile.org/html5shiv/3.7/html5shiv.min.js"></script><![endif]-->
  
  <script type="text/javascript">
	//visit my previous blog: http://old.colobu.com just like this http://colobu.com/?=123456
    var blog_url = location.href.toString();
	if (blog_url.indexOf("http://colobu.com/?p=") >= 0) {
		blog_url = blog_url.replace("colobu.com", "old.colobu.com");
		window.location.assign(blog_url);
	} else if (blog_url.indexOf("http://smallnest.gitcafe.com") >= 0) {
		blog_url = blog_url.replace("smallnest.gitcafe.com", "colobu.com");
		window.location.assign(blog_url);
	}  else if (blog_url.indexOf("http://smallnest.gitcafe.io") >= 0) {
		blog_url = blog_url.replace("smallnest.gitcafe.io", "colobu.com");
		window.location.assign(blog_url);
	}
</script>
<script src="./Kafka和Spring集成实践   鸟窝_files/share.js"></script><script type="text/javascript" async="" src="./Kafka和Spring集成实践   鸟窝_files/embed.js" charset="UTF-8"></script><style type="text/css">.fancybox-margin{margin-right:15px;}</style><style type="text/css">.MathJax_Hover_Frame {border-radius: .25em; -webkit-border-radius: .25em; -moz-border-radius: .25em; -khtml-border-radius: .25em; box-shadow: 0px 0px 15px #83A; -webkit-box-shadow: 0px 0px 15px #83A; -moz-box-shadow: 0px 0px 15px #83A; -khtml-box-shadow: 0px 0px 15px #83A; border: 1px solid #A6D ! important; display: inline-block; position: absolute}
.MathJax_Menu_Button .MathJax_Hover_Arrow {position: absolute; cursor: pointer; display: inline-block; border: 2px solid #AAA; border-radius: 4px; -webkit-border-radius: 4px; -moz-border-radius: 4px; -khtml-border-radius: 4px; font-family: 'Courier New',Courier; font-size: 9px; color: #F0F0F0}
.MathJax_Menu_Button .MathJax_Hover_Arrow span {display: block; background-color: #AAA; border: 1px solid; border-radius: 3px; line-height: 0; padding: 4px}
.MathJax_Hover_Arrow:hover {color: white!important; border: 2px solid #CCC!important}
.MathJax_Hover_Arrow:hover span {background-color: #CCC!important}
</style><style type="text/css">#MathJax_About {position: fixed; left: 50%; width: auto; text-align: center; border: 3px outset; padding: 1em 2em; background-color: #DDDDDD; color: black; cursor: default; font-family: message-box; font-size: 120%; font-style: normal; text-indent: 0; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; z-index: 201; border-radius: 15px; -webkit-border-radius: 15px; -moz-border-radius: 15px; -khtml-border-radius: 15px; box-shadow: 0px 10px 20px #808080; -webkit-box-shadow: 0px 10px 20px #808080; -moz-box-shadow: 0px 10px 20px #808080; -khtml-box-shadow: 0px 10px 20px #808080; filter: progid:DXImageTransform.Microsoft.dropshadow(OffX=2, OffY=2, Color='gray', Positive='true')}
#MathJax_About.MathJax_MousePost {outline: none}
.MathJax_Menu {position: absolute; background-color: white; color: black; width: auto; padding: 2px; border: 1px solid #CCCCCC; margin: 0; cursor: default; font: menu; text-align: left; text-indent: 0; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; z-index: 201; box-shadow: 0px 10px 20px #808080; -webkit-box-shadow: 0px 10px 20px #808080; -moz-box-shadow: 0px 10px 20px #808080; -khtml-box-shadow: 0px 10px 20px #808080; filter: progid:DXImageTransform.Microsoft.dropshadow(OffX=2, OffY=2, Color='gray', Positive='true')}
.MathJax_MenuItem {padding: 2px 2em; background: transparent}
.MathJax_MenuArrow {position: absolute; right: .5em; padding-top: .25em; color: #666666; font-size: .75em}
.MathJax_MenuActive .MathJax_MenuArrow {color: white}
.MathJax_MenuArrow.RTL {left: .5em; right: auto}
.MathJax_MenuCheck {position: absolute; left: .7em}
.MathJax_MenuCheck.RTL {right: .7em; left: auto}
.MathJax_MenuRadioCheck {position: absolute; left: 1em}
.MathJax_MenuRadioCheck.RTL {right: 1em; left: auto}
.MathJax_MenuLabel {padding: 2px 2em 4px 1.33em; font-style: italic}
.MathJax_MenuRule {border-top: 1px solid #CCCCCC; margin: 4px 1px 0px}
.MathJax_MenuDisabled {color: GrayText}
.MathJax_MenuActive {background-color: Highlight; color: HighlightText}
.MathJax_MenuDisabled:focus, .MathJax_MenuLabel:focus {background-color: #E8E8E8}
.MathJax_ContextMenu:focus {outline: none}
.MathJax_ContextMenu .MathJax_MenuItem:focus {outline: none}
#MathJax_AboutClose {top: .2em; right: .2em}
.MathJax_Menu .MathJax_MenuClose {top: -10px; left: -10px}
.MathJax_MenuClose {position: absolute; cursor: pointer; display: inline-block; border: 2px solid #AAA; border-radius: 18px; -webkit-border-radius: 18px; -moz-border-radius: 18px; -khtml-border-radius: 18px; font-family: 'Courier New',Courier; font-size: 24px; color: #F0F0F0}
.MathJax_MenuClose span {display: block; background-color: #AAA; border: 1.5px solid; border-radius: 18px; -webkit-border-radius: 18px; -moz-border-radius: 18px; -khtml-border-radius: 18px; line-height: 0; padding: 8px 0 6px}
.MathJax_MenuClose:hover {color: white!important; border: 2px solid #CCC!important}
.MathJax_MenuClose:hover span {background-color: #CCC!important}
.MathJax_MenuClose:hover:focus {outline: none}
</style><style type="text/css">.MathJax_Preview .MJXf-math {color: inherit!important}
</style><style type="text/css">.MJX_Assistive_MathML {position: absolute!important; clip: rect(1px, 1px, 1px, 1px); padding: 1px 0 0 0!important; border: 0!important; height: 1px!important; width: 1px!important; overflow: hidden!important; display: block!important}
</style><style type="text/css">#MathJax_Zoom {position: absolute; background-color: #F0F0F0; overflow: auto; display: block; z-index: 301; padding: .5em; border: 1px solid black; margin: 0; font-weight: normal; font-style: normal; text-align: left; text-indent: 0; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; -webkit-box-sizing: content-box; -moz-box-sizing: content-box; box-sizing: content-box; box-shadow: 5px 5px 15px #AAAAAA; -webkit-box-shadow: 5px 5px 15px #AAAAAA; -moz-box-shadow: 5px 5px 15px #AAAAAA; -khtml-box-shadow: 5px 5px 15px #AAAAAA; filter: progid:DXImageTransform.Microsoft.dropshadow(OffX=2, OffY=2, Color='gray', Positive='true')}
#MathJax_ZoomOverlay {position: absolute; left: 0; top: 0; z-index: 300; display: inline-block; width: 100%; height: 100%; border: 0; padding: 0; margin: 0; background-color: white; opacity: 0; filter: alpha(opacity=0)}
#MathJax_ZoomFrame {position: relative; display: inline-block; height: 0; width: 0}
#MathJax_ZoomEventTrap {position: absolute; left: 0; top: 0; z-index: 302; display: inline-block; border: 0; padding: 0; margin: 0; background-color: white; opacity: 0; filter: alpha(opacity=0)}
</style><style type="text/css">.MathJax_Preview {color: #888}
#MathJax_Message {position: fixed; left: 1em; bottom: 1.5em; background-color: #E6E6E6; border: 1px solid #959595; margin: 0px; padding: 2px 8px; z-index: 102; color: black; font-size: 80%; width: auto; white-space: nowrap}
#MathJax_MSIE_Frame {position: absolute; top: 0; left: 0; width: 0px; z-index: 101; border: 0px; margin: 0px; padding: 0px}
.MathJax_Error {color: #CC0000; font-style: italic}
</style><style type="text/css">.MJXp-script {font-size: .8em}
.MJXp-right {-webkit-transform-origin: right; -moz-transform-origin: right; -ms-transform-origin: right; -o-transform-origin: right; transform-origin: right}
.MJXp-bold {font-weight: bold}
.MJXp-italic {font-style: italic}
.MJXp-scr {font-family: MathJax_Script,'Times New Roman',Times,STIXGeneral,serif}
.MJXp-frak {font-family: MathJax_Fraktur,'Times New Roman',Times,STIXGeneral,serif}
.MJXp-sf {font-family: MathJax_SansSerif,'Times New Roman',Times,STIXGeneral,serif}
.MJXp-cal {font-family: MathJax_Caligraphic,'Times New Roman',Times,STIXGeneral,serif}
.MJXp-mono {font-family: MathJax_Typewriter,'Times New Roman',Times,STIXGeneral,serif}
.MJXp-largeop {font-size: 150%}
.MJXp-largeop.MJXp-int {vertical-align: -.2em}
.MJXp-math {display: inline-block; line-height: 1.2; text-indent: 0; font-family: 'Times New Roman',Times,STIXGeneral,serif; white-space: nowrap; border-collapse: collapse}
.MJXp-display {display: block; text-align: center; margin: 1em 0}
.MJXp-math span {display: inline-block}
.MJXp-box {display: block!important; text-align: center}
.MJXp-box:after {content: " "}
.MJXp-rule {display: block!important; margin-top: .1em}
.MJXp-char {display: block!important}
.MJXp-mo {margin: 0 .15em}
.MJXp-mfrac {margin: 0 .125em; vertical-align: .25em}
.MJXp-denom {display: inline-table!important; width: 100%}
.MJXp-denom > * {display: table-row!important}
.MJXp-surd {vertical-align: top}
.MJXp-surd > * {display: block!important}
.MJXp-script-box > *  {display: table!important; height: 50%}
.MJXp-script-box > * > * {display: table-cell!important; vertical-align: top}
.MJXp-script-box > *:last-child > * {vertical-align: bottom}
.MJXp-script-box > * > * > * {display: block!important}
.MJXp-mphantom {visibility: hidden}
.MJXp-munderover {display: inline-table!important}
.MJXp-over {display: inline-block!important; text-align: center}
.MJXp-over > * {display: block!important}
.MJXp-munderover > * {display: table-row!important}
.MJXp-mtable {vertical-align: .25em; margin: 0 .125em}
.MJXp-mtable > * {display: inline-table!important; vertical-align: middle}
.MJXp-mtr {display: table-row!important}
.MJXp-mtd {display: table-cell!important; text-align: center; padding: .5em 0 0 .5em}
.MJXp-mtr > .MJXp-mtd:first-child {padding-left: 0}
.MJXp-mtr:first-child > .MJXp-mtd {padding-top: 0}
.MJXp-mlabeledtr {display: table-row!important}
.MJXp-mlabeledtr > .MJXp-mtd:first-child {padding-left: 0}
.MJXp-mlabeledtr:first-child > .MJXp-mtd {padding-top: 0}
.MJXp-merror {background-color: #FFFF88; color: #CC0000; border: 1px solid #CC0000; padding: 1px 3px; font-style: normal; font-size: 90%}
.MJXp-scale0 {-webkit-transform: scaleX(.0); -moz-transform: scaleX(.0); -ms-transform: scaleX(.0); -o-transform: scaleX(.0); transform: scaleX(.0)}
.MJXp-scale1 {-webkit-transform: scaleX(.1); -moz-transform: scaleX(.1); -ms-transform: scaleX(.1); -o-transform: scaleX(.1); transform: scaleX(.1)}
.MJXp-scale2 {-webkit-transform: scaleX(.2); -moz-transform: scaleX(.2); -ms-transform: scaleX(.2); -o-transform: scaleX(.2); transform: scaleX(.2)}
.MJXp-scale3 {-webkit-transform: scaleX(.3); -moz-transform: scaleX(.3); -ms-transform: scaleX(.3); -o-transform: scaleX(.3); transform: scaleX(.3)}
.MJXp-scale4 {-webkit-transform: scaleX(.4); -moz-transform: scaleX(.4); -ms-transform: scaleX(.4); -o-transform: scaleX(.4); transform: scaleX(.4)}
.MJXp-scale5 {-webkit-transform: scaleX(.5); -moz-transform: scaleX(.5); -ms-transform: scaleX(.5); -o-transform: scaleX(.5); transform: scaleX(.5)}
.MJXp-scale6 {-webkit-transform: scaleX(.6); -moz-transform: scaleX(.6); -ms-transform: scaleX(.6); -o-transform: scaleX(.6); transform: scaleX(.6)}
.MJXp-scale7 {-webkit-transform: scaleX(.7); -moz-transform: scaleX(.7); -ms-transform: scaleX(.7); -o-transform: scaleX(.7); transform: scaleX(.7)}
.MJXp-scale8 {-webkit-transform: scaleX(.8); -moz-transform: scaleX(.8); -ms-transform: scaleX(.8); -o-transform: scaleX(.8); transform: scaleX(.8)}
.MJXp-scale9 {-webkit-transform: scaleX(.9); -moz-transform: scaleX(.9); -ms-transform: scaleX(.9); -o-transform: scaleX(.9); transform: scaleX(.9)}
.MathJax_PHTML .noError {vertical-align: ; font-size: 90%; text-align: left; color: black; padding: 1px 3px; border: 1px solid}
</style><link rel="stylesheet" href="http://bdimg.share.baidu.com/static/api/css/share_style0_24.css"><link type="text/css" rel="stylesheet" href="./Kafka和Spring集成实践   鸟窝_files/embed.default.css"></head>
<body><div id="MathJax_Message" style="display: none;"></div>
  <div id="container">
    <div id="wrap">
      <header id="header">
  <div id="banner"></div>
  <div id="header-outer" class="outer">
    <div id="header-title" class="inner">
      <h1 id="logo-wrap" class="animated bounceInLeft">
        <a href="http://colobu.com/" id="logo">鸟窝</a>
      </h1>
      
        <h2 id="subtitle-wrap" class="animated bounceInLeft">
          <a href="http://colobu.com/" id="subtitle">大道至简 Simplicity is the ultimate form of sophistication</a>
        </h2>
      
    </div>
    <div id="header-inner" class="inner">
      <nav id="main-nav">
        <a id="main-nav-toggle" class="nav-icon"></a>
        
          <a class="main-nav-link" href="http://colobu.com/"><i class="fa fa-home">&nbsp;</i>首页</a>
        
          <a class="main-nav-link" href="http://uridb.com/"><i class="fa fa-spinner fa-pulse">&nbsp;</i>技术流</a>
        
          <a class="main-nav-link" href="http://colobu.com/archives"><i class="fa fa-folder-o">&nbsp;</i>归档</a>
        
          <a class="main-nav-link" href="https://github.com/smallnest"><i class="fa fa-github">&nbsp;</i>github</a>
        
          <a class="main-nav-link" href="http://colobu.com/techreview"><i class="fa fa-newspaper-o">&nbsp;</i>技术快报</a>
        
          <a class="main-nav-link" href="http://colobu.com/about"><i class="fa fa-lemon-o">&nbsp;</i>关于</a>
        
      </nav>
      <nav id="sub-nav">
        
          <a id="nav-rss-link" class="nav-icon" href="http://colobu.com/atom.xml" title="RSS Feed"></a>
        
        <a id="nav-search-btn" class="nav-icon" title="Search"></a>
      </nav>
      <div id="search-form-wrap">
        <form action="http://www.baidu.com/baidu" method="get" accept-charset="utf-8" class="search-form">
          <input type="search" name="word" maxlength="20" class="search-form-input" placeholder="Search">
          <input type="submit" value="" class="search-form-submit">
          <input name="tn" type="hidden" value="bds">
          <input name="cl" type="hidden" value="3">
          <input name="ct" type="hidden" value="2097152">
          <input type="hidden" name="si" value="colobu.com">
        </form>
      </div>
    </div>
  </div>
</header>
      <div class="outer">
        <section id="main"><article id="post-kafka-spring-integration-in-practice" class="article article-type-post" itemscope="" itemprop="blogPost">
  <div class="article-meta">
    <a href="./Kafka和Spring集成实践   鸟窝_files/Kafka和Spring集成实践   鸟窝.htm" class="article-date">
  <time datetime="2014-11-19T02:23:42.000Z" itemprop="datePublished">2014年11月19日</time>
</a>
    
  <div class="article-category">
    <a class="article-category-link" href="http://colobu.com/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/">大数据</a>
  </div>

	
  <div class="article-author"> by smallnest</div>

  </div>
  <div class="article-inner">
    
    
      <header class="article-header">
        
  
    <h1 class="article-title" itemprop="name">
      Kafka和Spring集成实践
	  
    </h1>
  

      </header>
    
    <div class="article-entry" itemprop="articleBody">
	  
	    <h1 id="expanderHead" style="cursor:pointer;">
		目录 <span id="expanderSign">[−]</span>
		</h1>
	    <div id="article-entry-toc" data-role="collapsible" class="article-entry-toc">
		  <ol class="toc"><li class="toc-item toc-level-2"><a class="toc-link" href="http://colobu.com/2014/11/19/kafka-spring-integration-in-practice/#安装Zookeeper"><span class="toc-text">安装Zookeeper</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="http://colobu.com/2014/11/19/kafka-spring-integration-in-practice/#安装Kafka"><span class="toc-text">安装Kafka</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="http://colobu.com/2014/11/19/kafka-spring-integration-in-practice/#创建一个Spring项目"><span class="toc-text">创建一个Spring项目</span></a><ol class="toc-child"><li class="toc-item toc-level-3"><a class="toc-link" href="http://colobu.com/2014/11/19/kafka-spring-integration-in-practice/#使用Producer_API发送消息到Kafka"><span class="toc-text">使用Producer API发送消息到Kafka</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="http://colobu.com/2014/11/19/kafka-spring-integration-in-practice/#使用Kafka_High_Level_API接收消息"><span class="toc-text">使用Kafka High Level API接收消息</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="http://colobu.com/2014/11/19/kafka-spring-integration-in-practice/#使用spring-integration-kafka发送消息"><span class="toc-text">使用spring-integration-kafka发送消息</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="http://colobu.com/2014/11/19/kafka-spring-integration-in-practice/#使用spring-integration-kafka接收消息"><span class="toc-text">使用spring-integration-kafka接收消息</span></a></li></ol></li></ol>
	    </div>
	  
	  
      
        <p>本文以单机的环境演示如何将Kafka和Spring集成。<br>单机的环境最容易搭建， 并且只需在自己的PC上运行即可， 不需要很多的硬件环境，便于学习。 况且，本文的目的不是搭建ZooKeeper的集群环境， 而是重点介绍Kafka和Spring的应用。<br>具体的软件环境如下：</p>
<ul>
<li>OS: CentOS 6.4</li>
<li>Zookepper： zookeeper-3.4.6</li>
<li>Kafka： kafka_2.9.1-0.8.2-beta</li>
<li>Java： JDK 1.7.0_45-b18</li>
<li>Spring:4.0.6</li>
</ul>
<p>本例子在我的这个环境中运行正常， 全部代码可以到 <a href="https://github.com/smallnest/spring-kafka-demo" target="_blank" rel="external">github</a> 下载。<br><a id="more"></a></p>
<p>本文所有的操作系统用户都是<code>root</code>。 实际产品中可能安全标准需要特定的用户如<code>zookeeper</code>, <code>kafka</code>等。</p>
<h2 id="安装Zookeeper">安装Zookeeper</h2>
<p>首先下载解压zookeeper,选择合适的镜像站点以加快下载速度。<br>我们可以将zookeeper加到系统服务中， 增加一个<code>/etc/init.d/zookeeper</code>文件。</p>
<figure class="highlight"><table><tbody><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">cd /opt</div><div class="line">wget  http:<span class="comment">//apache.fayea.com/apache-mirror/zookeeper/zookeeper-3.4.6/zookeeper-3.4.6.tar.gz</span></div><div class="line">tar zxvf zookeeper-<span class="number">3.4</span>.<span class="number">6</span>.tar.gz</div><div class="line">vi /etc/<span class="keyword">init</span>.d/zookeeper</div></pre></td></tr></tbody></table></figure>

<p>将<a href="https://raw.githubusercontent.com/apache/zookeeper/trunk/src/packages/rpm/init.d/zookeeper" target="_blank" rel="external">https://raw.githubusercontent.com/apache/zookeeper/trunk/src/packages/rpm/init.d/zookeeper</a>文件的内容拷贝到这个文件，修改其中的运行zookeeper的用户以及zookeeper的文件夹位置。</p>
<figure class="highlight"><table><tbody><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">......</div><div class="line"><span class="function"><span class="title">start</span></span>() {</div><div class="line">  <span class="built_in">echo</span> -n $<span class="string">"Starting <span class="variable">$desc</span> (zookeeper): "</span></div><div class="line">  daemon --user root /opt/zookeeper-<span class="number">3.4</span>.<span class="number">6</span>/zkServer.sh start</div><div class="line">  RETVAL=$?</div><div class="line">  <span class="built_in">echo</span></div><div class="line">  [ <span class="variable">$RETVAL</span> <span class="operator">-eq</span> <span class="number">0</span> ] &amp;&amp; touch /var/lock/subsys/zookeeper</div><div class="line">  <span class="keyword">return</span> <span class="variable">$RETVAL</span></div><div class="line">}</div><div class="line"></div><div class="line"><span class="function"><span class="title">stop</span></span>() {</div><div class="line">  <span class="built_in">echo</span> -n $<span class="string">"Stopping <span class="variable">$desc</span> (zookeeper): "</span></div><div class="line">  daemon --user root /opt/zookeeper-<span class="number">3.4</span>.<span class="number">6</span>/zkServer.sh stop</div><div class="line">  RETVAL=$?</div><div class="line">  sleep <span class="number">5</span></div><div class="line">  <span class="built_in">echo</span></div><div class="line">  [ <span class="variable">$RETVAL</span> <span class="operator">-eq</span> <span class="number">0</span> ] &amp;&amp; rm <span class="operator">-f</span> /var/lock/subsys/zookeeper <span class="variable">$PIDFILE</span></div><div class="line">}</div><div class="line">......</div></pre></td></tr></tbody></table></figure>



<figure class="highlight"><table><tbody><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">chmod <span class="number">755</span> /etc/init.d/zookeeper</div><div class="line"><span class="class"><span class="keyword">service</span> <span class="title">zookeeper</span> start</span></div></pre></td></tr></tbody></table></figure>

<p>如果你不想加到服务，也可以直接运行zookeeper。</p>
<figure class="highlight"><table><tbody><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/<span class="keyword">opt</span>/zookeeper-<span class="number">3.4</span>.<span class="number">6</span>/zkServer.<span class="keyword">sh</span> start</div></pre></td></tr></tbody></table></figure>

<h2 id="安装Kafka">安装Kafka</h2>
<p>从合适的镜像站点下载最新的kafka并解压。</p>
<figure class="highlight"><table><tbody><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="label">wget http:</span>//apache.<span class="number">01</span>link.hk/kafka/<span class="number">0.8</span>.<span class="number">2</span>-beta/kafk<span class="built_in">a_2</span>.<span class="number">9.1</span>-<span class="number">0.8</span>.<span class="number">2</span>-beta.tgz</div><div class="line">tar zxvf kafk<span class="built_in">a_2</span>.<span class="number">9.1</span>-<span class="number">0.8</span>.<span class="number">2</span>-beta.tgz</div><div class="line">cd kafk<span class="built_in">a_2</span>.<span class="number">9.1</span>-<span class="number">0.8</span>.<span class="number">2</span>-beta</div></pre></td></tr></tbody></table></figure>

<p>启动Kafka:</p>
<figure class="highlight"><table><tbody><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bin/kafka-server-<span class="operator"><span class="keyword">start</span>.sh config/<span class="keyword">server</span>.properties</span></div></pre></td></tr></tbody></table></figure>

<p>创建一个<code>test</code>的topic：</p>
<figure class="highlight"><table><tbody><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">bin/kafka</span><span class="literal">-</span><span class="comment">topics</span><span class="string">.</span><span class="comment">sh</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">create</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">zookeeper</span> <span class="comment">localhost:2181</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">replication</span><span class="literal">-</span><span class="comment">factor</span> <span class="comment">1</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">partitions</span> <span class="comment">1</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">topic</span> <span class="comment">test</span></div></pre></td></tr></tbody></table></figure>

<p>可以利用kafka的命令启动一个生产者和消费者试验一下：</p>
<figure class="highlight"><table><tbody><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt; bin/kafka-console-producer.<span class="keyword">sh</span> --broker-<span class="keyword">list</span> localhos<span class="variable">t:9092</span> --topic test</div><div class="line">This <span class="keyword">is</span> <span class="keyword">a</span> message</div><div class="line">This <span class="keyword">is</span> another message</div></pre></td></tr></tbody></table></figure>



<figure class="highlight"><table><tbody><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt; bin/kafka-console-consumer.<span class="keyword">sh</span> --zookeeper localhos<span class="variable">t:2181</span> --topic test --from-beginning</div><div class="line">This <span class="keyword">is</span> <span class="keyword">a</span> message</div><div class="line">This <span class="keyword">is</span> another message</div></pre></td></tr></tbody></table></figure>

<p>更多的介绍可以查看我翻译整理的 <a href="http://colobu.com/2014/08/06/kafka-quickstart/" target="_blank" rel="external">Kafka快速入门</a></p>
<h2 id="创建一个Spring项目">创建一个Spring项目</h2>
<p>以上的准备环境完成，让我们开始创建一个项目。<br>以前我写过一篇简单介绍: <a href="http://colobu.com/2014/08/07/spring-integration-kafka/" target="_blank" rel="external">Spring 集成 Kafka</a>.<br><a href="https://github.com/spring-projects/spring-integration-kafka" target="_blank" rel="external">spring-integration-kafka</a>这个官方框架我就不介绍了。 我们主要使用它做集成。</p>
<p>首先我们先看一下使用Kafka自己的Producer/Consumer API发送/接收消息的例子。</p>
<h3 id="使用Producer_API发送消息到Kafka">使用Producer API发送消息到Kafka</h3>
<p>OK，现在我们先看一个使用Kafka 自己的producer API发送消息的例子：</p>
<figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NativeProducer</span> </span>{</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(String[] args) {</div><div class="line">		String topic= <span class="string">"test"</span>;</div><div class="line">		<span class="keyword">long</span> events = <span class="number">100</span>;</div><div class="line">        Random rand = <span class="keyword">new</span> Random();</div><div class="line"> </div><div class="line">        Properties props = <span class="keyword">new</span> Properties();</div><div class="line">        props.put(<span class="string">"metadata.broker.list"</span>, <span class="string">"localhost:9092"</span>);</div><div class="line">        props.put(<span class="string">"serializer.class"</span>, <span class="string">"kafka.serializer.StringEncoder"</span>);</div><div class="line">        props.put(<span class="string">"request.required.acks"</span>, <span class="string">"1"</span>);</div><div class="line"> </div><div class="line">        ProducerConfig config = <span class="keyword">new</span> ProducerConfig(props);</div><div class="line"> </div><div class="line">        Producer&lt;String, String&gt; producer = <span class="keyword">new</span> Producer&lt;String, String&gt;(config);</div><div class="line"> </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">long</span> nEvents = <span class="number">0</span>; nEvents &lt; events; nEvents++) {                </div><div class="line">               String msg = <span class="string">"NativeMessage-"</span> + rand.nextInt() ; </div><div class="line">               KeyedMessage&lt;String, String&gt; data = <span class="keyword">new</span> KeyedMessage&lt;String, String&gt;(topic, nEvents + <span class="string">""</span>, msg);</div><div class="line">               producer.send(data);</div><div class="line">        }</div><div class="line">        producer.close();</div><div class="line"></div><div class="line">	}</div><div class="line">}</div></pre></td></tr></tbody></table></figure>

<p>这个例子中首先初始化Producer对象，指定相应的broker和serializer， 然后发送100个字符串消息给Kafka。</p>
<p>运行<code>mvn package</code>编译代码，执行查看结果：</p>
<figure class="highlight"><table><tbody><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java -cp target/lib/*<span class="symbol">:target/spring-kafka-demo-</span><span class="number">0</span>.<span class="number">2.0</span>-<span class="constant">SNAPSHOT</span>.jar com.colobu.spring_kafka_demo.<span class="constant">NativeProducer</span></div></pre></td></tr></tbody></table></figure>

<p>上面的消费者控制台窗口会打印出收到的消息:</p>
<figure class="highlight"><table><tbody><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="code">......</span></div><div class="line">NativeMessage--1645592376</div><div class="line">NativeMessage-534168193</div><div class="line">NativeMessage--1899432197</div><div class="line">NativeMessage-1642480773</div><div class="line">NativeMessage--911267171</div><div class="line">NativeMessage-251458151</div><div class="line">NativeMessage--55710397</div><div class="line">NativeMessage-455515562</div><div class="line">NativeMessage-1108982916</div><div class="line">NativeMessage--1710296834</div><div class="line">NativeMessage-2102648373</div><div class="line">NativeMessage-499979365</div><div class="line">NativeMessage--1200107003</div><div class="line">NativeMessage-1184836299</div><div class="line">NativeMessage--1161123005</div><div class="line">NativeMessage-912582115</div><div class="line">NativeMessage--1557863408</div><div class="line">NativeMessage--1036456356</div><div class="line">......</div></pre></td></tr></tbody></table></figure>

<h3 id="使用Kafka_High_Level_API接收消息">使用Kafka High Level API接收消息</h3>
<p>用High level Consumer API接收消息，</p>
<figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.HashMap;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"><span class="keyword">import</span> java.util.Properties;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</div><div class="line"></div><div class="line"><span class="keyword">import</span> kafka.consumer.ConsumerConfig;</div><div class="line"><span class="keyword">import</span> kafka.consumer.ConsumerIterator;</div><div class="line"><span class="keyword">import</span> kafka.consumer.KafkaStream;</div><div class="line"><span class="keyword">import</span> kafka.javaapi.consumer.ConsumerConnector;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NativeConsumer</span> </span>{</div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> ConsumerConnector consumer;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> String topic;</div><div class="line">	<span class="keyword">private</span> ExecutorService executor;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="title">NativeConsumer</span>(String a_zookeeper, String a_groupId, String a_topic) {</div><div class="line">		consumer = kafka.consumer.Consumer.createJavaConsumerConnector(createConsumerConfig(a_zookeeper, a_groupId));</div><div class="line">		<span class="keyword">this</span>.topic = a_topic;</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutdown</span>() {</div><div class="line">		<span class="keyword">if</span> (consumer != <span class="keyword">null</span>)</div><div class="line">			consumer.shutdown();</div><div class="line">		<span class="keyword">if</span> (executor != <span class="keyword">null</span>)</div><div class="line">			executor.shutdown();</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>(<span class="keyword">int</span> a_numThreads) {</div><div class="line">		Map&lt;String, Integer&gt; topicCountMap = <span class="keyword">new</span> HashMap&lt;String, Integer&gt;();</div><div class="line">		topicCountMap.put(topic, <span class="keyword">new</span> Integer(a_numThreads));</div><div class="line">		Map&lt;String, List&lt;KafkaStream&lt;<span class="keyword">byte</span>[], <span class="keyword">byte</span>[]&gt;&gt;&gt; consumerMap = consumer.createMessageStreams(topicCountMap);</div><div class="line">		List&lt;KafkaStream&lt;<span class="keyword">byte</span>[], <span class="keyword">byte</span>[]&gt;&gt; streams = consumerMap.get(topic);</div><div class="line"></div><div class="line">		<span class="comment">// now launch all the threads</span></div><div class="line">		<span class="comment">//</span></div><div class="line">		executor = Executors.newFixedThreadPool(a_numThreads);</div><div class="line"></div><div class="line">		<span class="comment">// now create an object to consume the messages</span></div><div class="line">		<span class="comment">//</span></div><div class="line">		<span class="keyword">int</span> threadNumber = <span class="number">0</span>;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">final</span> KafkaStream stream : streams) {</div><div class="line">			executor.submit(<span class="keyword">new</span> ConsumerTest(stream, threadNumber));</div><div class="line">			threadNumber++;</div><div class="line">		}</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> ConsumerConfig <span class="title">createConsumerConfig</span>(String a_zookeeper, String a_groupId) {</div><div class="line">		Properties props = <span class="keyword">new</span> Properties();</div><div class="line">		props.put(<span class="string">"zookeeper.connect"</span>, a_zookeeper);</div><div class="line">		props.put(<span class="string">"group.id"</span>, a_groupId);</div><div class="line">		props.put(<span class="string">"zookeeper.session.timeout.ms"</span>, <span class="string">"400"</span>);</div><div class="line">		props.put(<span class="string">"zookeeper.sync.time.ms"</span>, <span class="string">"200"</span>);</div><div class="line">		props.put(<span class="string">"auto.commit.interval.ms"</span>, <span class="string">"1000"</span>);</div><div class="line"></div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> ConsumerConfig(props);</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(String[] args) {</div><div class="line">		String zooKeeper = <span class="string">"localhost:2181"</span>;</div><div class="line">		String groupId = <span class="string">"mygroup"</span>;</div><div class="line">		String topic = <span class="string">"test"</span>;</div><div class="line">		<span class="keyword">int</span> threads = <span class="number">1</span>;</div><div class="line"></div><div class="line">		NativeConsumer example = <span class="keyword">new</span> NativeConsumer(zooKeeper, groupId, topic);</div><div class="line">		example.run(threads);</div><div class="line"></div><div class="line">		<span class="keyword">try</span> {</div><div class="line">			Thread.sleep(<span class="number">10000</span>);</div><div class="line">		} <span class="keyword">catch</span> (InterruptedException ie) {</div><div class="line"></div><div class="line">		}</div><div class="line">		<span class="comment">//example.shutdown();</span></div><div class="line">	}</div><div class="line">}</div><div class="line"></div><div class="line">class ConsumerTest implements Runnable {</div><div class="line">    <span class="keyword">private</span> KafkaStream m_stream;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> m_threadNumber;</div><div class="line"> </div><div class="line">    <span class="keyword">public</span> <span class="title">ConsumerTest</span>(KafkaStream a_stream, <span class="keyword">int</span> a_threadNumber) {</div><div class="line">        m_threadNumber = a_threadNumber;</div><div class="line">        m_stream = a_stream;</div><div class="line">    }</div><div class="line"> </div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>() {</div><div class="line">        ConsumerIterator&lt;<span class="keyword">byte</span>[], <span class="keyword">byte</span>[]&gt; it = m_stream.iterator();</div><div class="line">        <span class="keyword">while</span> (it.hasNext())</div><div class="line">            System.out.println(<span class="string">"Thread "</span> + m_threadNumber + <span class="string">": "</span> + <span class="keyword">new</span> String(it.next().message()));</div><div class="line">        System.out.println(<span class="string">"Shutting down Thread: "</span> + m_threadNumber);</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></tbody></table></figure>

<p>在生产者控制台输入几条消息，可以看到运行这个例子的控制台可以将这些消息打印出来。</p>
<p>教程的代码中还包括一个使用Simple Consumer API接收消息的例子。 因为spring-integration-kafka不支持这种API，这里也不列出对比代码了。</p>
<h3 id="使用spring-integration-kafka发送消息">使用spring-integration-kafka发送消息</h3>
<p>Outbound Channel Adapter用来发送消息到Kafka。 消息从Spring Integration Channel中读取。 你可以在Spring application context指定这个channel。<br>一旦配置好这个Channel，就可以利用这个Channel往Kafka发消息。 明显地，Spring Integration特定的消息发送给这个Adaptor，然后发送前在内部被转为Kafka消息。当前的版本要求你必须指定消息key和topic作为头部数据 (header)，消息作为有载荷(payload)。<br>例如</p>
<figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> MessageChannel channel = ctx.getBean(<span class="string">"inputToKafka"</span>, MessageChannel.class);</div><div class="line"></div><div class="line">channel.send(</div><div class="line">        MessageBuilder.withPayload(payload) <span class="comment">//设置有效载荷</span></div><div class="line">                .setHeader(<span class="string">"messageKey"</span>, <span class="string">"key"</span>) <span class="comment">//指定key</span></div><div class="line">                .setHeader(<span class="string">"topic"</span>, <span class="string">"test"</span>).build()); /指定topic/</div></pre></td></tr></tbody></table></figure>

<p>实际代码如下：</p>
<figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Random;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class="line"><span class="keyword">import</span> org.springframework.integration.support.MessageBuilder;</div><div class="line"><span class="keyword">import</span> org.springframework.messaging.MessageChannel;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> </span>{</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CONFIG = <span class="string">"/context.xml"</span>;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> Random rand = <span class="keyword">new</span> Random();</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(String[] args) {</div><div class="line">		<span class="keyword">final</span> ClassPathXmlApplicationContext ctx = <span class="keyword">new</span> ClassPathXmlApplicationContext(CONFIG, Producer.class);</div><div class="line">		ctx.start();</div><div class="line"></div><div class="line">		<span class="keyword">final</span> MessageChannel channel = ctx.getBean(<span class="string">"inputToKafka"</span>, MessageChannel.class);</div><div class="line"></div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) {</div><div class="line">			channel.send(MessageBuilder.withPayload(<span class="string">"Message-"</span> + rand.nextInt()).setHeader(<span class="string">"messageKey"</span>, String.valueOf(i)).setHeader(<span class="string">"topic"</span>, <span class="string">"test"</span>).build());</div><div class="line">		}</div><div class="line"></div><div class="line">		<span class="keyword">try</span> {</div><div class="line">			Thread.sleep(<span class="number">100000</span>);</div><div class="line">		} <span class="keyword">catch</span> (InterruptedException e) {</div><div class="line">			e.printStackTrace();</div><div class="line">		}</div><div class="line">		ctx.close();</div><div class="line">	}</div><div class="line">}</div></pre></td></tr></tbody></table></figure>

<p>Spring 配置文件：</p>
<figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="pi">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">beans</span> <span class="attribute">xmlns</span>=<span class="value">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">       <span class="attribute">xmlns:xsi</span>=<span class="value">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">       <span class="attribute">xmlns:int</span>=<span class="value">"http://www.springframework.org/schema/integration"</span></div><div class="line">       <span class="attribute">xmlns:int-kafka</span>=<span class="value">"http://www.springframework.org/schema/integration/kafka"</span></div><div class="line">       <span class="attribute">xmlns:task</span>=<span class="value">"http://www.springframework.org/schema/task"</span></div><div class="line">       <span class="attribute">xsi:schemaLocation</span>=<span class="value">"http://www.springframework.org/schema/integration/kafka http://www.springframework.org/schema/integration/kafka/spring-integration-kafka.xsd</span></div><div class="line">		http://www.springframework.org/schema/integration http://www.springframework.org/schema/integration/spring-integration.xsd</div><div class="line">		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class="line">		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd"&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="title">int:channel</span> <span class="attribute">id</span>=<span class="value">"inputToKafka"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="title">int:queue</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="title">int:channel</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="title">int-kafka:outbound-channel-adapter</span> <span class="attribute">id</span>=<span class="value">"kafkaOutboundChannelAdapter"</span></span></div><div class="line">                                        <span class="attribute">kafka-producer-context-ref</span>=<span class="value">"kafkaProducerContext"</span></div><div class="line">                                        <span class="attribute">auto-startup</span>=<span class="value">"false"</span></div><div class="line">                                        <span class="attribute">channel</span>=<span class="value">"inputToKafka"</span></div><div class="line">                                        <span class="attribute">order</span>=<span class="value">"3"</span></div><div class="line">            &gt;</div><div class="line">        <span class="tag">&lt;<span class="title">int:poller</span> <span class="attribute">fixed-delay</span>=<span class="value">"1000"</span> <span class="attribute">time-unit</span>=<span class="value">"MILLISECONDS"</span> <span class="attribute">receive-timeout</span>=<span class="value">"0"</span> <span class="attribute">task-executor</span>=<span class="value">"taskExecutor"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="title">int-kafka:outbound-channel-adapter</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="title">task:executor</span> <span class="attribute">id</span>=<span class="value">"taskExecutor"</span> <span class="attribute">pool-size</span>=<span class="value">"5"</span> <span class="attribute">keep-alive</span>=<span class="value">"120"</span> <span class="attribute">queue-capacity</span>=<span class="value">"500"</span>/&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"producerProperties"</span></span></div><div class="line">		<span class="attribute">class</span>=<span class="value">"org.springframework.beans.factory.config.PropertiesFactoryBean"</span>&gt;</div><div class="line">		<span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"properties"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="title">props</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="title">prop</span> <span class="attribute">key</span>=<span class="value">"topic.metadata.refresh.interval.ms"</span>&gt;</span>3600000<span class="tag">&lt;/<span class="title">prop</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="title">prop</span> <span class="attribute">key</span>=<span class="value">"message.send.max.retries"</span>&gt;</span>5<span class="tag">&lt;/<span class="title">prop</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="title">prop</span> <span class="attribute">key</span>=<span class="value">"serializer.class"</span>&gt;</span>kafka.serializer.StringEncoder<span class="tag">&lt;/<span class="title">prop</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="title">prop</span> <span class="attribute">key</span>=<span class="value">"request.required.acks"</span>&gt;</span>1<span class="tag">&lt;/<span class="title">prop</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="title">props</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="title">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="title">bean</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="title">int-kafka:producer-context</span> <span class="attribute">id</span>=<span class="value">"kafkaProducerContext"</span></span></div><div class="line">		<span class="attribute">producer-properties</span>=<span class="value">"producerProperties"</span>&gt;</div><div class="line">		<span class="tag">&lt;<span class="title">int-kafka:producer-configurations</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="title">int-kafka:producer-configuration</span> <span class="attribute">broker-list</span>=<span class="value">"localhost:9092"</span></span></div><div class="line">                       <span class="attribute">topic</span>=<span class="value">"test"</span></div><div class="line">                       <span class="attribute">compression-codec</span>=<span class="value">"default"</span>/&gt;</div><div class="line">		<span class="tag">&lt;/<span class="title">int-kafka:producer-configurations</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="title">int-kafka:producer-context</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">beans</span>&gt;</span></div></pre></td></tr></tbody></table></figure>


<p><code>int:channel</code>是配置Spring Integration Channel, 此channel基于queue。<br><code>int-kafka:outbound-channel-adapter</code>是outbound-channel-adapter对象， 内部使用一个线程池处理消息。关键是<code>kafka-producer-context-ref</code>。<br><code>int-kafka:producer-context</code>配置producer列表，要处理的topic，这些Producer最终要转换成Kafka的Producer。</p>
<p>producer的配置参数如下：</p>
<figure class="highlight"><table><tbody><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">broker-list             List <span class="keyword">of</span> comma separated brokers that this producer connects <span class="keyword">to</span></div><div class="line">topic                   Topic name <span class="keyword">or</span> Java regex pattern <span class="keyword">of</span> topic name</div><div class="line">compression-codec       Compression method <span class="keyword">to</span> be used. <span class="keyword">Default</span> <span class="keyword">is</span> no compression. Supported compression codec are gzip <span class="keyword">and</span> snappy.</div><div class="line">                        Anything <span class="keyword">else</span> would result <span class="keyword">in</span> no compression</div><div class="line">value-encoder           Serializer <span class="keyword">to</span> be used <span class="keyword">for</span> encoding messages.</div><div class="line"><span class="keyword">key</span>-encoder             Serializer <span class="keyword">to</span> be used <span class="keyword">for</span> encoding the partition <span class="keyword">key</span></div><div class="line"><span class="keyword">key</span>-<span class="keyword">class</span>-type          Type <span class="keyword">of</span> the <span class="keyword">key</span> <span class="keyword">class</span>. This will be ignored <span class="keyword">if</span> no <span class="keyword">key</span>-encoder <span class="keyword">is</span> provided</div><div class="line">value-<span class="keyword">class</span>-type        Type <span class="keyword">of</span> the value <span class="keyword">class</span>. This will be ignored <span class="keyword">if</span> no value-encoder <span class="keyword">is</span> provided.</div><div class="line">partitioner             <span class="keyword">Custom</span> implementation <span class="keyword">of</span> a Kafka Partitioner <span class="keyword">interface</span>.</div><div class="line">async                   <span class="literal">True</span>/<span class="literal">False</span> - <span class="keyword">default</span> <span class="keyword">is</span> <span class="literal">false</span>. Setting this <span class="keyword">to</span> <span class="literal">true</span> would make the Kafka producer <span class="keyword">to</span> use</div><div class="line">                        an async producer</div><div class="line">batch-num-messages      Number <span class="keyword">of</span> messages <span class="keyword">to</span> batch at the producer. <span class="keyword">If</span> async <span class="keyword">is</span> <span class="literal">false</span>, <span class="keyword">then</span> this has no effect.</div></pre></td></tr></tbody></table></figure>

<p>value-encoder 和key-encoder可以是其它实现了Kafka Encoder接口的Bean。同样partitioner也是实现了Kafka的Partitioner接口的Bean。<br>一个Encoder的例子：</p>
<figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"kafkaEncoder"</span> <span class="attribute">class</span>=<span class="value">"org.springframework.integration.kafka.serializer.avro.AvroSpecificDatumBackedKafkaEncoder"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">constructor-arg</span> <span class="attribute">value</span>=<span class="value">"com.company.AvroGeneratedSpecificRecord"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">bean</span>&gt;</span></div></pre></td></tr></tbody></table></figure>

<p>Spring Integration Kafka 也提供了个基于Avro的Encoder。 <a href="http://avro.apache.org/" target="_blank" rel="external">Avro</a>也是Apache的一个项目， 在大数据处理时也是一个常用的序列化框架。<br>不指定Encoder将使用Kafka缺省的Encoder (kafka.serializer.DefaultEncoder, byte[] --&gt; same byte[])。</p>
<p><code>producerProperties</code>可以用来设置配置属性进行调优。配置属性列表请参考 <a href="http://kafka.apache.org/documentation.html#producerconfigs" target="_blank" rel="external">http://kafka.apache.org/documentation.html#producerconfigs</a></p>
<h3 id="使用spring-integration-kafka接收消息">使用spring-integration-kafka接收消息</h3>
<p>同样的原理实现一个消费者：</p>
<figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.colobu.spring_kafka_demo;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Collection;</div><div class="line"><span class="keyword">import</span> java.util.HashMap;</div><div class="line"><span class="keyword">import</span> java.util.Iterator;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"><span class="keyword">import</span> java.util.Random;</div><div class="line"><span class="keyword">import</span> java.util.Set;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</div><div class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class="line"><span class="keyword">import</span> org.springframework.integration.channel.QueueChannel;</div><div class="line"><span class="keyword">import</span> org.springframework.messaging.Message;</div><div class="line"></div><div class="line"><span class="keyword">import</span> ch.qos.logback.classic.Level;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> </span>{</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CONFIG = <span class="string">"/consumer_context.xml"</span>;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> Random rand = <span class="keyword">new</span> Random();</div><div class="line"></div><div class="line">	<span class="annotation">@SuppressWarnings</span>({ <span class="string">"unchecked"</span>, <span class="string">"unchecked"</span>, <span class="string">"rawtypes"</span> })</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(String[] args) {</div><div class="line">		ch.qos.logback.classic.Logger rootLogger = (ch.qos.logback.classic.Logger)LoggerFactory.getLogger(ch.qos.logback.classic.Logger.ROOT_LOGGER_NAME);</div><div class="line">		rootLogger.setLevel(Level.toLevel(<span class="string">"info"</span>));</div><div class="line">		</div><div class="line">		<span class="keyword">final</span> ClassPathXmlApplicationContext ctx = <span class="keyword">new</span> ClassPathXmlApplicationContext(CONFIG, Consumer.class);</div><div class="line">		ctx.start();</div><div class="line"></div><div class="line">		<span class="keyword">final</span> QueueChannel channel = ctx.getBean(<span class="string">"inputFromKafka"</span>, QueueChannel.class);</div><div class="line">		Message msg;		</div><div class="line">		<span class="keyword">while</span>((msg = channel.receive()) != <span class="keyword">null</span>) {</div><div class="line">			HashMap map = (HashMap)msg.getPayload();</div><div class="line">			Set&lt;Map.Entry&gt; set = map.entrySet();</div><div class="line">			<span class="keyword">for</span> (Map.Entry entry : set) {</div><div class="line">				String topic = (String)entry.getKey();</div><div class="line">				System.out.println(<span class="string">"Topic:"</span> + topic);</div><div class="line">				ConcurrentHashMap&lt;Integer,List&lt;<span class="keyword">byte</span>[]&gt;&gt; messages = (ConcurrentHashMap&lt;Integer,List&lt;<span class="keyword">byte</span>[]&gt;&gt;)entry.getValue();</div><div class="line">				Collection&lt;List&lt;<span class="keyword">byte</span>[]&gt;&gt; values = messages.values();</div><div class="line">				<span class="keyword">for</span> (Iterator&lt;List&lt;<span class="keyword">byte</span>[]&gt;&gt; iterator = values.iterator(); iterator.hasNext();) {</div><div class="line">					List&lt;<span class="keyword">byte</span>[]&gt; list = iterator.next();</div><div class="line">					<span class="keyword">for</span> (<span class="keyword">byte</span>[] object : list) {</div><div class="line">						String message = <span class="keyword">new</span> String(object);</div><div class="line">						System.out.println(<span class="string">"\tMessage: "</span> + message);</div><div class="line">					}</div><div class="line">					</div><div class="line">				}</div><div class="line">			</div><div class="line">			}</div><div class="line">			</div><div class="line">		}</div><div class="line">		</div><div class="line">		<span class="keyword">try</span> {</div><div class="line">			Thread.sleep(<span class="number">100000</span>);</div><div class="line">		} <span class="keyword">catch</span> (InterruptedException e) {</div><div class="line">			e.printStackTrace();</div><div class="line">		}</div><div class="line">		ctx.close();</div><div class="line">	}</div><div class="line">}</div></pre></td></tr></tbody></table></figure>

<p>Spring的配置文件如下：</p>
<figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="pi">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">beans</span> <span class="attribute">xmlns</span>=<span class="value">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">	<span class="attribute">xmlns:xsi</span>=<span class="value">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attribute">xmlns:int</span>=<span class="value">"http://www.springframework.org/schema/integration"</span></div><div class="line">	<span class="attribute">xmlns:int-kafka</span>=<span class="value">"http://www.springframework.org/schema/integration/kafka"</span></div><div class="line">	<span class="attribute">xmlns:task</span>=<span class="value">"http://www.springframework.org/schema/task"</span></div><div class="line">	<span class="attribute">xsi:schemaLocation</span>=<span class="value">"http://www.springframework.org/schema/integration/kafka http://www.springframework.org/schema/integration/kafka/spring-integration-kafka.xsd</span></div><div class="line">		http://www.springframework.org/schema/integration http://www.springframework.org/schema/integration/spring-integration.xsd</div><div class="line">		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class="line">		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd"&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="title">int:channel</span> <span class="attribute">id</span>=<span class="value">"inputFromKafka"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="title">int:queue</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="title">int:channel</span>&gt;</span></div><div class="line">    </div><div class="line">	<span class="tag">&lt;<span class="title">int-kafka:inbound-channel-adapter</span></span></div><div class="line">		id="kafkaInboundChannelAdapter" <span class="attribute">kafka-consumer-context-ref</span>=<span class="value">"consumerContext"</span></div><div class="line">		<span class="attribute">auto-startup</span>=<span class="value">"false"</span> <span class="attribute">channel</span>=<span class="value">"inputFromKafka"</span>&gt;</div><div class="line">		<span class="tag">&lt;<span class="title">int:poller</span> <span class="attribute">fixed-delay</span>=<span class="value">"10"</span> <span class="attribute">time-unit</span>=<span class="value">"MILLISECONDS"</span></span></div><div class="line">			<span class="attribute">max-messages-per-poll</span>=<span class="value">"5"</span> /&gt;</div><div class="line">	<span class="tag">&lt;/<span class="title">int-kafka:inbound-channel-adapter</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"consumerProperties"</span></span></div><div class="line">		<span class="attribute">class</span>=<span class="value">"org.springframework.beans.factory.config.PropertiesFactoryBean"</span>&gt;</div><div class="line">		<span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"properties"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="title">props</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="title">prop</span> <span class="attribute">key</span>=<span class="value">"auto.offset.reset"</span>&gt;</span>smallest<span class="tag">&lt;/<span class="title">prop</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="title">prop</span> <span class="attribute">key</span>=<span class="value">"socket.receive.buffer.bytes"</span>&gt;</span>10485760<span class="tag">&lt;/<span class="title">prop</span>&gt;</span> <span class="comment">&lt;!-- 10M --&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="title">prop</span> <span class="attribute">key</span>=<span class="value">"fetch.message.max.bytes"</span>&gt;</span>5242880<span class="tag">&lt;/<span class="title">prop</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="title">prop</span> <span class="attribute">key</span>=<span class="value">"auto.commit.interval.ms"</span>&gt;</span>1000<span class="tag">&lt;/<span class="title">prop</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="title">props</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="title">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="title">bean</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="title">int-kafka:consumer-context</span> <span class="attribute">id</span>=<span class="value">"consumerContext"</span></span></div><div class="line">		<span class="attribute">consumer-timeout</span>=<span class="value">"4000"</span> <span class="attribute">zookeeper-connect</span>=<span class="value">"zookeeperConnect"</span> <span class="attribute">consumer-properties</span>=<span class="value">"consumerProperties"</span>&gt;</div><div class="line">		<span class="tag">&lt;<span class="title">int-kafka:consumer-configurations</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="title">int-kafka:consumer-configuration</span></span></div><div class="line">				group-id="mygroup" <span class="attribute">max-messages</span>=<span class="value">"5000"</span>&gt;</div><div class="line">				<span class="tag">&lt;<span class="title">int-kafka:topic</span> <span class="attribute">id</span>=<span class="value">"test"</span> <span class="attribute">streams</span>=<span class="value">"4"</span> /&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="title">int-kafka:consumer-configuration</span>&gt;</span></div><div class="line">			<span class="comment">&lt;!-- &lt;int-kafka:consumer-configuration group-id="default3" value-decoder="kafkaSpecificDecoder" </span></div><div class="line">				key-decoder="kafkaReflectionDecoder" max-messages="10"&gt; &lt;int-kafka:topic-filter </div><div class="line">				pattern="regextopic.*" streams="4" exclude="false" /&gt; &lt;/int-kafka:consumer-configuration&gt; --&gt;</div><div class="line">		<span class="tag">&lt;/<span class="title">int-kafka:consumer-configurations</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="title">int-kafka:consumer-context</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="title">int-kafka:zookeeper-connect</span> <span class="attribute">id</span>=<span class="value">"zookeeperConnect"</span></span></div><div class="line">		<span class="attribute">zk-connect</span>=<span class="value">"localhost:2181"</span> <span class="attribute">zk-connection-timeout</span>=<span class="value">"6000"</span></div><div class="line">		<span class="attribute">zk-session-timeout</span>=<span class="value">"400"</span> <span class="attribute">zk-sync-time</span>=<span class="value">"200"</span> /&gt;</div><div class="line"><span class="tag">&lt;/<span class="title">beans</span>&gt;</span></div></pre></td></tr></tbody></table></figure>

<p>这个配置和Producer类似， 同样声明一个channel, 定义<code>inbound-channel-adapter</code>, 它引用Bean <code>kafka-consumer-context</code>,<br><code>kafka-consumer-context</code>定义了消费者的列表。 <code>consumer-configuration</code>还提供了<code>topic-filter</code>，使用正则表达式建立白名单或者黑名单(exclude属性)。</p>
<p>消费者上下文还需要<code>zookeeper-connect</code>。</p>
<p>由于spring-integration-kafka只实现了high level Consumer API,这也就意味着你不可能回滚重新查看以前的消息， 因为high level API不提供offset管理。</p>
<p>注意Channel中得到的有效负载的类型是：<br><code>Map&lt;String, Map&lt;Integer, List&lt;Object&gt;&gt;&gt;</code>,<br>这个Map的key是topic, 值还是另外的Map对象。<br>这个值Map的key值是分区号，value值是消息列表。 在本例中由于消息是字符串， 转换成了byte[]数组。</p>
<p>这种复杂的结构是由于Kafka的设计造成的。 Kafka保证对于同一个topic的同一个分区的消息是严格有序的。所有这种数据结构可以提供有序的消息。</p>

      
    </div>
    <footer class="article-footer">
	
<div class="bdsharebuttonbox bdshare-button-style0-24" data-bd-bind="1455436697788"><a title="分享到新浪微博" class="bds_tsina" href="http://colobu.com/2014/11/19/kafka-spring-integration-in-practice/#" data-cmd="tsina"></a><a title="分享到微信" class="bds_weixin" href="http://colobu.com/2014/11/19/kafka-spring-integration-in-practice/#" data-cmd="weixin"></a><a title="分享到QQ空间" class="bds_qzone" href="http://colobu.com/2014/11/19/kafka-spring-integration-in-practice/#" data-cmd="qzone"></a><a title="分享到印象笔记" class="bds_evernotecn" href="http://colobu.com/2014/11/19/kafka-spring-integration-in-practice/#" data-cmd="evernotecn"></a><a title="分享到有道云笔记" class="bds_youdao" href="http://colobu.com/2014/11/19/kafka-spring-integration-in-practice/#" data-cmd="youdao"></a><a title="分享到百度云收藏" class="bds_bdysc" href="http://colobu.com/2014/11/19/kafka-spring-integration-in-practice/#" data-cmd="bdysc"></a><a class="bds_more" href="http://colobu.com/2014/11/19/kafka-spring-integration-in-practice/#" data-cmd="more"></a></div>
<script>window._bd_share_config={"common":{"bdSnsKey":{},"bdText":"","bdMini":"2","bdMiniList":false,"bdPic":"","bdStyle":"0","bdSize":"24"},"share":{}};with(document)0[(getElementsByTagName('head')[0]||body).appendChild(createElement('script')).src='http://bdimg.share.baidu.com/static/api/js/share.js?v=89860593.js?cdnversion='+~(-new Date()/36e5)];</script>
      
	  
	  
        <a href="http://colobu.com/2014/11/19/kafka-spring-integration-in-practice/#comments" class="article-comment-link">评论</a>
      
	  
      
  <ul class="article-tag-list"><li class="article-tag-list-item"><a class="article-tag-list-link" href="http://colobu.com/tags/Kafka/">Kafka</a></li><li class="article-tag-list-item"><a class="article-tag-list-link" href="http://colobu.com/tags/Spring/">Spring</a></li></ul>

    </footer>
  </div>
  
    
<nav id="article-nav">
  
    <a href="http://colobu.com/2014/11/20/New-Features-in-CSharp-6/" id="article-nav-newer" class="article-nav-link-wrap">
      <strong class="article-nav-caption">Newer</strong>
      <div class="article-nav-title">
        
          CSharp 6.0的新特性
        
      </div>
    </a>
  
  
    <a href="http://colobu.com/2014/11/18/Java-8-Stream/" id="article-nav-older" class="article-nav-link-wrap">
      <strong class="article-nav-caption">Older</strong>
      <div class="article-nav-title">Java 8 Stream探秘</div>
    </a>
  
</nav>

  
</article>


<section id="comments">
  <div class="ds-thread" data-thread-key="2014/11/19/kafka-spring-integration-in-practice/" data-title="Kafka和Spring集成实践" data-url="http://colobu.com/2014/11/19/kafka-spring-integration-in-practice/" id="ds-thread"><div id="ds-reset"><div class="ds-meta" style="display: none;"><a href="javascript:void(0)" class="ds-like-thread-button ds-rounded"><span class="ds-icon ds-icon-heart"></span> <span class="ds-thread-like-text">喜欢</span><span class="ds-thread-cancel-like">取消喜欢</span></a><span class="ds-like-panel"></span></div><div class="ds-comments-info"><div class="ds-sort"><a class="ds-order-desc ds-current">最新</a><a class="ds-order-asc">最早</a><a class="ds-order-hot">最热</a></div><ul class="ds-comments-tabs"><li class="ds-tab"><a class="ds-comments-tab-duoshuo ds-current" href="javascript:void(0);"><span class="ds-highlight">7</span>条评论</a></li>  </ul></div><ul class="ds-comments"><li class="ds-post" data-post-id="6228780190621762306"><div class="ds-post-self" data-post-id="6228780190621762306" data-thread-id="1358038697303345671" data-root-id="6228755851419583233" data-source="duoshuo"><div class="ds-avatar" data-user-id="8264938"><a rel="nofollow author" target="_blank" href="http://weibo.com/colobu" onclick="this.href=&#39;http://colobu.duoshuo.com/user-url/?user_id=8264938&#39;;" title="colobu"><img src="./Kafka和Spring集成实践   鸟窝_files/1" alt="colobu"></a></div><div class="ds-comment-body"><div class="ds-comment-header"><a class="ds-user-name ds-highlight" data-qqt-account="" href="http://weibo.com/colobu" onclick="this.href=&#39;http://colobu.duoshuo.com/user-url/?user_id=8264938&#39;;" rel="nofollow" target="_blank" data-user-id="8264938">colobu</a></div><p><a class="ds-comment-context" data-post-id="6228780190621762306" data-parent-id="6228755851419583233">回复 逾扬: </a>你自己要实现的domain类。参考avro的文档。</p><div class="ds-comment-footer ds-comment-actions"><span class="ds-time" datetime="2015-12-16T15:28:20+08:00" title="2015年12月16日 下午3:28:20">2015年12月16日</span><a class="ds-post-reply" href="javascript:void(0);"><span class="ds-icon ds-icon-reply"></span>回复</a><a class="ds-post-likes" href="javascript:void(0);"><span class="ds-icon ds-icon-like"></span>顶</a><a class="ds-post-repost" href="javascript:void(0);"><span class="ds-icon ds-icon-share"></span>转发</a><a class="ds-post-report" href="javascript:void(0);"><span class="ds-icon ds-icon-report"></span>举报</a></div></div></div></li><li class="ds-post" data-post-id="6228755851419583233"><div class="ds-post-self" data-post-id="6228755851419583233" data-thread-id="1358038697303345671" data-root-id="0" data-source="duoshuo"><div class="ds-avatar" data-user-id="640584"><a rel="nofollow author" target="_blank" href="http://t.qq.com/yuyang_2700" onclick="this.href=&#39;http://colobu.duoshuo.com/user-url/?user_id=640584&#39;;" title="逾扬"><img src="./Kafka和Spring集成实践   鸟窝_files/50" alt="逾扬"></a></div><div class="ds-comment-body"><div class="ds-comment-header"><a class="ds-user-name ds-highlight" data-qqt-account="" href="http://t.qq.com/yuyang_2700" onclick="this.href=&#39;http://colobu.duoshuo.com/user-url/?user_id=640584&#39;;" rel="nofollow" target="_blank" data-user-id="640584">逾扬</a></div><p>com.company.AvroGeneratedSpecificRecord</p><div class="ds-comment-footer ds-comment-actions"><span class="ds-time" datetime="2015-12-16T13:53:54+08:00" title="2015年12月16日 下午1:53:54">2015年12月16日</span><a class="ds-post-reply" href="javascript:void(0);"><span class="ds-icon ds-icon-reply"></span>回复</a><a class="ds-post-likes" href="javascript:void(0);"><span class="ds-icon ds-icon-like"></span>顶</a><a class="ds-post-repost" href="javascript:void(0);"><span class="ds-icon ds-icon-share"></span>转发</a><a class="ds-post-report" href="javascript:void(0);"><span class="ds-icon ds-icon-report"></span>举报</a></div></div></div></li><li class="ds-post" data-post-id="6228755741902111489"><div class="ds-post-self" data-post-id="6228755741902111489" data-thread-id="1358038697303345671" data-root-id="0" data-source="duoshuo"><div class="ds-avatar" data-user-id="640584"><a rel="nofollow author" target="_blank" href="http://t.qq.com/yuyang_2700" onclick="this.href=&#39;http://colobu.duoshuo.com/user-url/?user_id=640584&#39;;" title="逾扬"><img src="./Kafka和Spring集成实践   鸟窝_files/50" alt="逾扬"></a></div><div class="ds-comment-body"><div class="ds-comment-header"><a class="ds-user-name ds-highlight" data-qqt-account="" href="http://t.qq.com/yuyang_2700" onclick="this.href=&#39;http://colobu.duoshuo.com/user-url/?user_id=640584&#39;;" rel="nofollow" target="_blank" data-user-id="640584">逾扬</a></div><p>AvroGeneratedSpecificRecord   你好，这个类从哪里来的？</p><div class="ds-comment-footer ds-comment-actions"><span class="ds-time" datetime="2015-12-16T13:53:28+08:00" title="2015年12月16日 下午1:53:28">2015年12月16日</span><a class="ds-post-reply" href="javascript:void(0);"><span class="ds-icon ds-icon-reply"></span>回复</a><a class="ds-post-likes" href="javascript:void(0);"><span class="ds-icon ds-icon-like"></span>顶</a><a class="ds-post-repost" href="javascript:void(0);"><span class="ds-icon ds-icon-share"></span>转发</a><a class="ds-post-report" href="javascript:void(0);"><span class="ds-icon ds-icon-report"></span>举报</a></div></div></div></li><li class="ds-post" data-post-id="6228062115685466882"><div class="ds-post-self" data-post-id="6228062115685466882" data-thread-id="1358038697303345671" data-root-id="6228006286982644482" data-source="duoshuo"><div class="ds-avatar" data-user-id="8264938"><a rel="nofollow author" target="_blank" href="http://weibo.com/colobu" onclick="this.href=&#39;http://colobu.duoshuo.com/user-url/?user_id=8264938&#39;;" title="colobu"><img src="./Kafka和Spring集成实践   鸟窝_files/1" alt="colobu"></a></div><div class="ds-comment-body"><div class="ds-comment-header"><a class="ds-user-name ds-highlight" data-qqt-account="" href="http://weibo.com/colobu" onclick="this.href=&#39;http://colobu.duoshuo.com/user-url/?user_id=8264938&#39;;" rel="nofollow" target="_blank" data-user-id="8264938">colobu</a></div><p><a class="ds-comment-context" data-post-id="6228062115685466882" data-parent-id="6228006286982644482">回复 kafkabin: </a>未遇到这种情况。很可能是 zookeeper客户端和server的版本不一致</p><div class="ds-comment-footer ds-comment-actions"><span class="ds-time" datetime="2015-12-14T17:01:51+08:00" title="2015年12月14日 下午5:01:51">2015年12月14日</span><a class="ds-post-reply" href="javascript:void(0);"><span class="ds-icon ds-icon-reply"></span>回复</a><a class="ds-post-likes" href="javascript:void(0);"><span class="ds-icon ds-icon-like"></span>顶</a><a class="ds-post-repost" href="javascript:void(0);"><span class="ds-icon ds-icon-share"></span>转发</a><a class="ds-post-report" href="javascript:void(0);"><span class="ds-icon ds-icon-report"></span>举报</a></div></div></div></li><li class="ds-post" data-post-id="6228006286982644482"><div class="ds-post-self" data-post-id="6228006286982644482" data-thread-id="1358038697303345671" data-root-id="0" data-source="duoshuo"><div class="ds-avatar"><img src="./Kafka和Spring集成实践   鸟窝_files/noavatar_default.png" alt="kafkabin"></div><div class="ds-comment-body"><div class="ds-comment-header"><span class="ds-user-name" data-qqt-account="">kafkabin</span></div><p>您好，集成之后无法连接到服务，源码说是需要SASL的认证，你有遇到过吗</p><div class="ds-comment-footer ds-comment-actions"><span class="ds-time" datetime="2015-12-14T13:25:12+08:00" title="2015年12月14日 下午1:25:12">2015年12月14日</span><a class="ds-post-reply" href="javascript:void(0);"><span class="ds-icon ds-icon-reply"></span>回复</a><a class="ds-post-likes" href="javascript:void(0);"><span class="ds-icon ds-icon-like"></span>顶</a><a class="ds-post-repost" href="javascript:void(0);"><span class="ds-icon ds-icon-share"></span>转发</a><a class="ds-post-report" href="javascript:void(0);"><span class="ds-icon ds-icon-report"></span>举报</a></div></div></div></li><li class="ds-post" data-post-id="6218362360319443714"><div class="ds-post-self" data-post-id="6218362360319443714" data-thread-id="1358038697303345671" data-root-id="0" data-source="duoshuo"><div class="ds-avatar"><img src="./Kafka和Spring集成实践   鸟窝_files/noavatar_default.png" alt="yolanda"></div><div class="ds-comment-body"><div class="ds-comment-header"><span class="ds-user-name" data-qqt-account="">yolanda</span></div><p>Exception in thread "main" org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.integration.kafka.outbound.KafkaProducerMessageHandler#0': Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: [Assertion failed] - this argument is required; it must not be null<br>	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1566)<br>	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:539)<br>	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:476)<br>	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:302)<br>	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)<br>	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:298)<br>	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:193)<br>	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:762)<br>	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:757)<br>	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:480)<br>	at org.springframework.context.support.ClassPathXmlApplicationContext.(ClassPathXmlApplicationContext.java:197)<br>	at org.springframework.context.support.ClassPathXmlApplicationContext.(ClassPathXmlApplicationContext.java:172)<br>	at org.springframework.context.support.ClassPathXmlApplicationContext.(ClassPathXmlApplicationContext.java:158)</p><div class="ds-comment-footer ds-comment-actions"><span class="ds-time" datetime="2015-11-18T13:41:50+08:00" title="2015年11月18日 下午1:41:50">2015年11月18日</span><a class="ds-post-reply" href="javascript:void(0);"><span class="ds-icon ds-icon-reply"></span>回复</a><a class="ds-post-likes" href="javascript:void(0);"><span class="ds-icon ds-icon-like"></span>顶</a><a class="ds-post-repost" href="javascript:void(0);"><span class="ds-icon ds-icon-share"></span>转发</a><a class="ds-post-report" href="javascript:void(0);"><span class="ds-icon ds-icon-report"></span>举报</a></div></div></div></li><li class="ds-post" data-post-id="1358038697303343419"><div class="ds-post-self" data-post-id="1358038697303343419" data-thread-id="1358038697303345671" data-root-id="0" data-source="duoshuo"><div class="ds-avatar"><img src="./Kafka和Spring集成实践   鸟窝_files/noavatar_default.png" alt="kaybinwong"></div><div class="ds-comment-body"><div class="ds-comment-header"><span class="ds-user-name" data-qqt-account="">kaybinwong</span></div><p>你好，我集成后提示发送成功，但是队列却未曾收到数据，看了源码也没发现什么问题，你有遇到吗？<br>2015-09-17 09:57:06<br>[DEBUG]-[Thread: main]-[org.springframework.integration.channel.AbstractMessageChannel.send()]: preSend on channel 'common-message.producer', message: GenericMessage [payload=11111111111, headers={timestamp=1442455026169, id=ffa7883d-502a-3649-a7d5-7fccf19a89b6, topic=test-2, messageKey=key}]<br><br>2015-09-17 09:57:06<br>[DEBUG]-[Thread: main]-[org.springframework.integration.channel.AbstractMessageChannel.send()]: postSend (sent=true) on channel 'common-message.producer', message: GenericMessage [payload=11111111111, headers={timestamp=1442455026169, id=ffa7883d-502a-3649-a7d5-7fccf19a89b6, topic=test-2, messageKey=key}]<br>passed</p><div class="ds-comment-footer ds-comment-actions"><span class="ds-time" datetime="2015-09-17T10:04:14+08:00" title="2015年9月17日 上午10:04:14">2015年9月17日</span><a class="ds-post-reply" href="javascript:void(0);"><span class="ds-icon ds-icon-reply"></span>回复</a><a class="ds-post-likes" href="javascript:void(0);"><span class="ds-icon ds-icon-like"></span>顶</a><a class="ds-post-repost" href="javascript:void(0);"><span class="ds-icon ds-icon-share"></span>转发</a><a class="ds-post-report" href="javascript:void(0);"><span class="ds-icon ds-icon-report"></span>举报</a></div></div></div></li></ul><div class="ds-paginator" style="display: none;"><div class="ds-border"></div><a data-page="1" href="javascript:void(0);" class="ds-current">1</a></div><a name="respond"></a><div class="ds-login-buttons"><p>社交帐号登录:</p><div class="ds-social-links"><ul class="ds-service-list"><li><a href="http://colobu.duoshuo.com/login/weibo/" rel="nofollow" class="ds-service-link ds-weibo">微博</a></li><li><a href="http://colobu.duoshuo.com/login/qq/" rel="nofollow" class="ds-service-link ds-qq">QQ</a></li><li><a href="http://colobu.duoshuo.com/login/renren/" rel="nofollow" class="ds-service-link ds-renren">人人</a></li><li><a href="http://colobu.duoshuo.com/login/douban/" rel="nofollow" class="ds-service-link ds-douban">豆瓣</a></li><li><a class="ds-more-services" href="javascript:void(0)">更多»</a></li></ul><ul class="ds-service-list ds-additional-services"><li><a href="http://colobu.duoshuo.com/login/kaixin/" rel="nofollow" class="ds-service-link ds-kaixin">开心</a></li><li><a href="http://colobu.duoshuo.com/login/netease/" rel="nofollow" class="ds-service-link ds-netease">网易</a></li><li><a href="http://colobu.duoshuo.com/login/sohu/" rel="nofollow" class="ds-service-link ds-sohu">搜狐</a></li><li><a href="http://colobu.duoshuo.com/login/baidu/" rel="nofollow" class="ds-service-link ds-baidu">百度</a></li><li><a href="http://colobu.duoshuo.com/login/google/" rel="nofollow" class="ds-service-link ds-google">谷歌</a></li></ul></div></div><div class="ds-replybox"><a class="ds-avatar" href="javascript:void(0);" onclick="return false"><img src="./Kafka和Spring集成实践   鸟窝_files/noavatar_default.png" alt=""></a><form method="post"><input type="hidden" name="thread_id" value="1358038697303345671">
<input type="hidden" name="parent_id" value="">
<input type="hidden" name="nonce" value="56c0338be3030"><div class="ds-textarea-wrapper ds-rounded-top"><textarea name="message" title="Ctrl+Enter快捷提交" placeholder="说点什么吧…"></textarea><pre class="ds-hidden-text"></pre></div><div class="ds-post-toolbar"><div class="ds-post-options ds-gradient-bg"><span class="ds-sync"></span></div><button class="ds-post-button" type="submit">发布</button><div class="ds-toolbar-buttons"><a class="ds-toolbar-button ds-add-emote" title="插入表情"></a><a class="ds-toolbar-button ds-add-image" title="插入图片"></a></div></div></form></div><p class="ds-powered-by"><a href="http://duoshuo.com/" target="_blank" rel="nofollow">多说</a></p></div></div>
  
</section>
</section>
        
          <aside id="sidebar">
  
    
  <div class="widget-wrap">
    <h3 class="widget-title">分类</h3>
    <div class="widget">
      <ul class="category-list"><li class="category-list-item"><a class="category-list-link" href="http://colobu.com/categories/Android/">Android</a><span class="category-list-count">12</span></li><li class="category-list-item"><a class="category-list-link" href="http://colobu.com/categories/DOTNET/">DOTNET</a><span class="category-list-count">1</span></li><li class="category-list-item"><a class="category-list-link" href="http://colobu.com/categories/Docker/">Docker</a><span class="category-list-count">2</span></li><li class="category-list-item"><a class="category-list-link" href="http://colobu.com/categories/Go/">Go</a><span class="category-list-count">9</span></li><li class="category-list-item"><a class="category-list-link" href="http://colobu.com/categories/Java/">Java</a><span class="category-list-count">48</span></li><li class="category-list-item"><a class="category-list-link" href="http://colobu.com/categories/Linux/">Linux</a><span class="category-list-count">5</span></li><li class="category-list-item"><a class="category-list-link" href="http://colobu.com/categories/Scala/">Scala</a><span class="category-list-count">11</span></li><li class="category-list-item"><a class="category-list-link" href="http://colobu.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/">前端开发</a><span class="category-list-count">17</span></li><li class="category-list-item"><a class="category-list-link" href="http://colobu.com/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/">大数据</a><span class="category-list-count">52</span></li><li class="category-list-item"><a class="category-list-link" href="http://colobu.com/categories/%E5%B7%A5%E5%85%B7/">工具</a><span class="category-list-count">10</span></li><li class="category-list-item"><a class="category-list-link" href="http://colobu.com/categories/%E6%9E%B6%E6%9E%84/">架构</a><span class="category-list-count">13</span></li><li class="category-list-item"><a class="category-list-link" href="http://colobu.com/categories/%E7%AE%97%E6%B3%95/">算法</a><span class="category-list-count">1</span></li><li class="category-list-item"><a class="category-list-link" href="http://colobu.com/categories/%E7%AE%A1%E7%90%86/">管理</a><span class="category-list-count">2</span></li><li class="category-list-item"><a class="category-list-link" href="http://colobu.com/categories/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/">网络编程</a><span class="category-list-count">8</span></li><li class="category-list-item"><a class="category-list-link" href="http://colobu.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/">读书笔记</a><span class="category-list-count">1</span></li><li class="category-list-item"><a class="category-list-link" href="http://colobu.com/categories/%E9%AB%98%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/">高并发编程</a><span class="category-list-count">16</span></li></ul>
    </div>
  </div>

  
    
  <div class="widget-wrap">
    <h3 class="widget-title">标签云</h3>
    <div class="widget tagcloud">
      <a href="http://colobu.com/tags/Android/" style="font-size: 13.33px;">Android</a><a href="http://colobu.com/tags/ApacheBench/" style="font-size: 11.11px;">ApacheBench</a><a href="http://colobu.com/tags/Bower/" style="font-size: 10.00px;">Bower</a><a href="http://colobu.com/tags/C/" style="font-size: 10.00px;">C#</a><a href="http://colobu.com/tags/CQRS/" style="font-size: 10.00px;">CQRS</a><a href="http://colobu.com/tags/CRC/" style="font-size: 10.00px;">CRC</a><a href="http://colobu.com/tags/CSS/" style="font-size: 11.11px;">CSS</a><a href="http://colobu.com/tags/Curator/" style="font-size: 20.00px;">Curator</a><a href="http://colobu.com/tags/Disruptor/" style="font-size: 10.00px;">Disruptor</a><a href="http://colobu.com/tags/Docker/" style="font-size: 11.11px;">Docker</a><a href="http://colobu.com/tags/Ember/" style="font-size: 11.11px;">Ember</a><a href="http://colobu.com/tags/FastJson/" style="font-size: 10.00px;">FastJson</a><a href="http://colobu.com/tags/GAE/" style="font-size: 10.00px;">GAE</a><a href="http://colobu.com/tags/GC/" style="font-size: 12.22px;">GC</a><a href="http://colobu.com/tags/Gnuplot/" style="font-size: 10.00px;">Gnuplot</a><a href="http://colobu.com/tags/Go/" style="font-size: 11.11px;">Go</a><a href="http://colobu.com/tags/Gradle/" style="font-size: 10.00px;">Gradle</a><a href="http://colobu.com/tags/Grunt/" style="font-size: 10.00px;">Grunt</a><a href="http://colobu.com/tags/Gulp/" style="font-size: 10.00px;">Gulp</a><a href="http://colobu.com/tags/Hadoop/" style="font-size: 10.00px;">Hadoop</a><a href="http://colobu.com/tags/JVM/" style="font-size: 10.00px;">JVM</a><a href="http://colobu.com/tags/Java/" style="font-size: 16.67px;">Java</a><a href="http://colobu.com/tags/Kafka/" style="font-size: 17.78px;">Kafka</a><a href="http://colobu.com/tags/Lambda/" style="font-size: 13.33px;">Lambda</a><a href="http://colobu.com/tags/Linux/" style="font-size: 12.22px;">Linux</a><a href="http://colobu.com/tags/LongAdder/" style="font-size: 10.00px;">LongAdder</a><a href="http://colobu.com/tags/MathJax/" style="font-size: 10.00px;">MathJax</a><a href="http://colobu.com/tags/Maven/" style="font-size: 11.11px;">Maven</a><a href="http://colobu.com/tags/Memcached/" style="font-size: 10.00px;">Memcached</a><a href="http://colobu.com/tags/Metrics/" style="font-size: 10.00px;">Metrics</a><a href="http://colobu.com/tags/Mongo/" style="font-size: 12.22px;">Mongo</a><a href="http://colobu.com/tags/Netty/" style="font-size: 14.44px;">Netty</a><a href="http://colobu.com/tags/Node/" style="font-size: 10.00px;">Node</a><a href="http://colobu.com/tags/OAuth/" style="font-size: 10.00px;">OAuth</a><a href="http://colobu.com/tags/Performance/" style="font-size: 10.00px;">Performance</a><a href="http://colobu.com/tags/Quartz/" style="font-size: 10.00px;">Quartz</a><a href="http://colobu.com/tags/Sass/" style="font-size: 10.00px;">Sass</a><a href="http://colobu.com/tags/Scala/" style="font-size: 15.56px;">Scala</a><a href="http://colobu.com/tags/Spark/" style="font-size: 18.89px;">Spark</a><a href="http://colobu.com/tags/Spring/" style="font-size: 13.33px;">Spring</a>
    </div>
  </div>

  
    
  <div class="widget-wrap">
    <h3 class="widget-title">归档</h3>
    <div class="widget">
      <ul class="archive-list"><li class="archive-list-item"><a class="archive-list-link" href="http://colobu.com/archives/2016/01/">January 2016</a><span class="archive-list-count">1</span></li><li class="archive-list-item"><a class="archive-list-link" href="http://colobu.com/archives/2015/12/">December 2015</a><span class="archive-list-count">3</span></li><li class="archive-list-item"><a class="archive-list-link" href="http://colobu.com/archives/2015/11/">November 2015</a><span class="archive-list-count">10</span></li><li class="archive-list-item"><a class="archive-list-link" href="http://colobu.com/archives/2015/10/">October 2015</a><span class="archive-list-count">9</span></li><li class="archive-list-item"><a class="archive-list-link" href="http://colobu.com/archives/2015/09/">September 2015</a><span class="archive-list-count">12</span></li><li class="archive-list-item"><a class="archive-list-link" href="http://colobu.com/archives/2015/08/">August 2015</a><span class="archive-list-count">12</span></li><li class="archive-list-item"><a class="archive-list-link" href="http://colobu.com/archives/2015/07/">July 2015</a><span class="archive-list-count">12</span></li><li class="archive-list-item"><a class="archive-list-link" href="http://colobu.com/archives/2015/06/">June 2015</a><span class="archive-list-count">8</span></li><li class="archive-list-item"><a class="archive-list-link" href="http://colobu.com/archives/2015/05/">May 2015</a><span class="archive-list-count">7</span></li><li class="archive-list-item"><a class="archive-list-link" href="http://colobu.com/archives/2015/04/">April 2015</a><span class="archive-list-count">15</span></li><li class="archive-list-item"><a class="archive-list-link" href="http://colobu.com/archives/2015/03/">March 2015</a><span class="archive-list-count">11</span></li><li class="archive-list-item"><a class="archive-list-link" href="http://colobu.com/archives/2015/02/">February 2015</a><span class="archive-list-count">4</span></li><li class="archive-list-item"><a class="archive-list-link" href="http://colobu.com/archives/2015/01/">January 2015</a><span class="archive-list-count">12</span></li><li class="archive-list-item"><a class="archive-list-link" href="http://colobu.com/archives/2014/12/">December 2014</a><span class="archive-list-count">28</span></li><li class="archive-list-item"><a class="archive-list-link" href="http://colobu.com/archives/2014/11/">November 2014</a><span class="archive-list-count">12</span></li><li class="archive-list-item"><a class="archive-list-link" href="http://colobu.com/archives/2014/10/">October 2014</a><span class="archive-list-count">10</span></li><li class="archive-list-item"><a class="archive-list-link" href="http://colobu.com/archives/2014/09/">September 2014</a><span class="archive-list-count">28</span></li><li class="archive-list-item"><a class="archive-list-link" href="http://colobu.com/archives/2014/08/">August 2014</a><span class="archive-list-count">19</span></li><li class="archive-list-item"><a class="archive-list-link" href="http://colobu.com/archives/2014/07/">July 2014</a><span class="archive-list-count">1</span></li></ul>
    </div>
  </div>

  
    
  <div class="widget-wrap">
    <h3 class="widget-title">近期文章</h3>
    <div class="widget">
      <ul>
        
          <li>
            <a href="http://colobu.com/2016/01/04/Scala-magic-functions/">Scala 魔法函数</a>
          </li>
        
          <li>
            <a href="http://colobu.com/2015/12/04/Kafka-0-9-is-released/">Kafka 0.9 发布</a>
          </li>
        
          <li>
            <a href="http://colobu.com/2015/12/03/item-based-recommender-for-douban-movies/">为豆瓣电影实现Item-based协同过滤的推荐系统</a>
          </li>
        
          <li>
            <a href="http://colobu.com/2015/12/02/user-based-recommender-for-douban-movies/">为豆瓣电影实现User-based协同过滤的推荐系统</a>
          </li>
        
          <li>
            <a href="http://colobu.com/2015/11/30/movie-recommendation-for-douban-users-by-spark-mllib/">使用Spark MLlib给豆瓣用户推荐电影</a>
          </li>
        
      </ul>
    </div>
  </div>

  
    
  <div class="widget-wrap">
    <h3 class="widget-title">友情链接</h3>
    <div class="widget">
      <ul>
        
          <li>
			 
            <a href="http://old.colobu.com/" target="_blank">旧的博客</a>
			
          </li>
        
          <li>
			 
			&nbsp;
			
          </li>
        
          <li>
			 
            <a href="http://weekly.manong.io/issues/" target="_blank">码农周刊</a>
			
          </li>
        
          <li>
			 
            <a href="http://www.tuicool.com/mags" target="_blank">编程狂人周刊</a>
			
          </li>
        
          <li>
			 
            <a href="http://www.importnew.com/" target="_blank">importnew</a>
			
          </li>
        
          <li>
			 
            <a href="http://ifeve.com/" target="_blank">并发编程网</a>
			
          </li>
        
          <li>
			 
			&nbsp;
			
          </li>
        
          <li>
			 
            <a href="http://github.com/" target="_blank">github</a>
			
          </li>
        
          <li>
			 
            <a href="http://stackoverflow.com/" target="_blank">stackoverflow</a>
			
          </li>
        
          <li>
			 
            <a href="http://www.javacodegeeks.com/" target="_blank">javacodegeeks</a>
			
          </li>
        
          <li>
			 
            <a href="http://www.infoq.com/" target="_blank">infoq</a>
			
          </li>
        
          <li>
			 
            <a href="http://www.dzone.com/links/index.html" target="_blank">dzone</a>
			
          </li>
        
          <li>
			 
            <a href="https://oj.leetcode.com/problems/" target="_blank">leetcode</a>
			
          </li>
        
          <li>
			 
			&nbsp;
			
          </li>
        
          <li>
			 
            <a href="http://www.flaticon.com/" target="_blank">免费的矢量图片</a>
			
          </li>
        
          <li>
			 
            <a href="http://fortawesome.github.io/Font-Awesome/" target="_blank">Font-Awesome</a>
			
          </li>
        
          <li>
			 
            <a href="http://getbootstrap.com/" target="_blank">Bootstrap</a>
			
          </li>
        
          <li>
			 
            <a href="http://emberjs.com/" target="_blank">Ember</a>
			
          </li>
        
          <li>
			 
            <a href="http://www.qianduan.net/icon-font-large-collecting.html" target="_blank">icon font大搜罗</a>
			
          </li>
        
          <li>
			 
            <a href="http://www.iconfont.cn/" target="_blank">阿里巴巴矢量库</a>
			
          </li>
        
      </ul>
    </div>
  </div>

  
      <div class="widget-wrap">
    <h3 class="widget-title">热评文章</h3>
    <div class="widget">
		<div class="ds-top-threads" data-range="monthly" data-num-items="5" id="ds-top-threads"><li><a target="_blank" href="http://colobu.com/2014/12/11/spark-sql-quick-start/" title="Spark SQL 初探： 使用大数据分析2000万数据">Spark SQL 初探： 使用大数据分析2000万数据</a></li><li><a target="_blank" href="http://colobu.com/2015/05/22/implement-C1000K-servers-by-spray-netty-undertow-and-node-js/" title="使用四种框架分别实现百万websocket常连接的服务器">使用四种框架分别实现百万websocket常连接的服务器</a></li><li><a target="_blank" href="http://colobu.com/2015/11/30/movie-recommendation-for-douban-users-by-spark-mllib/" title="使用Spark MLlib给豆瓣用户推荐电影">使用Spark MLlib给豆瓣用户推荐电影</a></li><li><a target="_blank" href="http://colobu.com/2015/12/04/Kafka-0-9-is-released/" title="Kafka 0.9 发布">Kafka 0.9 发布</a></li><li><a target="_blank" href="http://colobu.com/2016/01/04/Scala-magic-functions/" title="Scala 魔法函数">Scala 魔法函数</a></li></div>
    </div>
  </div>

  
      <div class="widget-wrap">
    <h3 class="widget-title">最新评论</h3>
    <div class="widget">
		<ul class="ds-recent-comments" data-num-items="10" data-show-avatars="1" data-show-time="1" data-show-admin="1" data-excerpt-length="70" id="ds-recent-comments"><li class="ds-comment ds-show-avatars" data-post-id="6250055939039167234"><div class="ds-avatar"><a rel="nofollow author" target="_blank" href="http://weibo.com/andyensub" onclick="this.href=&#39;http://colobu.duoshuo.com/user-url/?user_id=6250055691889804034&#39;;" title="井底之蛙温水煮娃青蛙王子"><img src="./Kafka和Spring集成实践   鸟窝_files/1(1)" alt="井底之蛙温水煮娃青蛙王子" style="width:32px;height:32px"></a></div><div class="ds-meta"><a rel="nofollow author" target="_blank" href="http://weibo.com/andyensub">井底之蛙温水煮娃青蛙王子</a><span class="ds-time" datetime="2016-02-11T23:29:07+08:00" title="2016年2月11日 下午11:29:07">2月11日</span></div><div class="ds-thread-title">在 <a href="http://colobu.com/2014/12/08/spark-quick-start/#comments">Spark 快速入门</a> 中评论</div><div class="ds-excerpt">看</div></li><li class="ds-comment ds-show-avatars" data-post-id="6246220273217962754"><div class="ds-avatar"><a rel="nofollow author" target="_blank" href="http://weibo.com/loocup" onclick="this.href=&#39;http://colobu.duoshuo.com/user-url/?user_id=6246219772099298049&#39;;" title="Tranch"><img src="./Kafka和Spring集成实践   鸟窝_files/1(2)" alt="Tranch" style="width:32px;height:32px"></a></div><div class="ds-meta"><a rel="nofollow author" target="_blank" href="http://weibo.com/loocup">Tranch</a><span class="ds-time" datetime="2016-02-01T15:24:46+08:00" title="2016年2月1日 下午3:24:46">2月1日</span></div><div class="ds-thread-title">在 <a href="http://colobu.com/2014/08/06/kafka-quickstart/#comments">Kafka快速入门</a> 中评论</div><div class="ds-excerpt">代码行首的“&gt;”好坑…… 我刚刚复制了比较长的一行执行完才发现前面有个 “&gt;”，文件被清空了……</div></li><li class="ds-comment ds-show-avatars" data-post-id="6243956496883778305"><div class="ds-avatar"><img src="./Kafka和Spring集成实践   鸟窝_files/noavatar_default.png" alt="小天" style="width:32px;height:32px"></div><div class="ds-meta">小天<span class="ds-time" datetime="2016-01-26T13:00:10+08:00" title="2016年1月26日 下午1:00:10">1月26日</span></div><div class="ds-thread-title">在 <a href="http://colobu.com/2016/01/04/Scala-magic-functions/#comments">Scala 魔法函数</a> 中评论</div><div class="ds-excerpt">嗯，好的，谢谢。[太开心]</div></li><li class="ds-comment ds-show-avatars" data-post-id="6243671729223238401"><div class="ds-avatar"><a rel="nofollow author" target="_blank" href="http://weibo.com/colobu" onclick="this.href=&#39;http://colobu.duoshuo.com/user-url/?user_id=8264938&#39;;" title="colobu"><img src="./Kafka和Spring集成实践   鸟窝_files/1" alt="colobu" style="width:32px;height:32px"></a></div><div class="ds-meta"><a rel="nofollow author" target="_blank" href="http://weibo.com/colobu">colobu</a><span class="ds-time" datetime="2016-01-25T18:35:07+08:00" title="2016年1月25日 下午6:35:07">1月25日</span></div><div class="ds-thread-title">在 <a href="http://colobu.com/2015/12/04/Kafka-0-9-is-released/#comments">Kafka 0.9 发布</a> 中评论</div><div class="ds-excerpt">[good]    可以为所有的client配置统一的quota,或者针对单个client配置quota:      quota.producer.default=10485760    quota.consumer.default=104…</div></li><li class="ds-comment ds-show-avatars" data-post-id="6243649990732808961"><div class="ds-avatar"><img src="./Kafka和Spring集成实践   鸟窝_files/noavatar_default.png" alt="潇慕雨Muyoo" style="width:32px;height:32px"></div><div class="ds-meta">潇慕雨Muyoo<span class="ds-time" datetime="2016-01-25T17:10:46+08:00" title="2016年1月25日 下午5:10:46">1月25日</span></div><div class="ds-thread-title">在 <a href="http://colobu.com/2015/12/04/Kafka-0-9-is-released/#comments">Kafka 0.9 发布</a> 中评论</div><div class="ds-excerpt">"现在Kafka 0.9提供了基于client的用户配额控制。对于Producer可以控制每个client的每秒写的字节数，对于Consumer控制每个client的每秒读的字节。"——…</div></li><li class="ds-comment ds-show-avatars" data-post-id="6243566199674766081"><div class="ds-avatar"><img src="./Kafka和Spring集成实践   鸟窝_files/noavatar_default.png" alt="ggjjl1" style="width:32px;height:32px"></div><div class="ds-meta">ggjjl1<span class="ds-time" datetime="2016-01-25T11:45:36+08:00" title="2016年1月25日 上午11:45:36">1月25日</span></div><div class="ds-thread-title">在 <a href="http://colobu.com/2014/12/11/spark-sql-quick-start/#comments">Spark SQL 初探： 使用大数据分析2000万数据</a> 中评论</div><div class="ds-excerpt">请问数据可以在哪儿下载？</div></li><li class="ds-comment ds-show-avatars" data-post-id="6243237744693216001"><div class="ds-avatar"><a rel="nofollow author" target="_blank" href="http://weibo.com/colobu" onclick="this.href=&#39;http://colobu.duoshuo.com/user-url/?user_id=8264938&#39;;" title="colobu"><img src="./Kafka和Spring集成实践   鸟窝_files/1" alt="colobu" style="width:32px;height:32px"></a></div><div class="ds-meta"><a rel="nofollow author" target="_blank" href="http://weibo.com/colobu">colobu</a><span class="ds-time" datetime="2016-01-24T14:31:02+08:00" title="2016年1月24日 下午2:31:02">1月24日</span></div><div class="ds-thread-title">在 <a href="http://colobu.com/2016/01/04/Scala-magic-functions/#comments">Scala 魔法函数</a> 中评论</div><div class="ds-excerpt">通过highlight. js生成</div></li><li class="ds-comment ds-show-avatars" data-post-id="6243197741090996993"><div class="ds-avatar"><img src="./Kafka和Spring集成实践   鸟窝_files/noavatar_default.png" alt="小天" style="width:32px;height:32px"></div><div class="ds-meta">小天<span class="ds-time" datetime="2016-01-24T11:55:48+08:00" title="2016年1月24日 上午11:55:48">1月24日</span></div><div class="ds-thread-title">在 <a href="http://colobu.com/2016/01/04/Scala-magic-functions/#comments">Scala 魔法函数</a> 中评论</div><div class="ds-excerpt">作者您好，想请问下您博客中代码显示部分（支持代码高亮和缩进）用的是JS插件吗？还是自己实现的。</div></li><li class="ds-comment ds-show-avatars" data-post-id="6242241470405804802"><div class="ds-avatar"><img src="./Kafka和Spring集成实践   鸟窝_files/noavatar_default.png" alt="only" style="width:32px;height:32px"></div><div class="ds-meta">only<span class="ds-time" datetime="2016-01-21T22:04:59+08:00" title="2016年1月21日 下午10:04:59">1月21日</span></div><div class="ds-thread-title">在 <a href="http://colobu.com/2014/12/11/spark-sql-quick-start/#comments">Spark SQL 初探： 使用大数据分析2000万数据</a> 中评论</div><div class="ds-excerpt">男女开房的人数大约是2:1   gay比较多</div></li><li class="ds-comment ds-show-avatars" data-post-id="6241666023133545217"><div class="ds-avatar"><a rel="nofollow author" target="_blank" href="http://weibo.com/mcwanghui" onclick="this.href=&#39;http://colobu.duoshuo.com/user-url/?user_id=10497752&#39;;" title="coder"><img src="./Kafka和Spring集成实践   鸟窝_files/1(3)" alt="coder" style="width:32px;height:32px"></a></div><div class="ds-meta"><a rel="nofollow author" target="_blank" href="http://weibo.com/mcwanghui">coder</a><span class="ds-time" datetime="2016-01-20T08:51:57+08:00" title="2016年1月20日 上午8:51:57">1月20日</span></div><div class="ds-thread-title">在 <a href="http://colobu.com/2014/12/02/go-socket-programming-UDP/#comments">Go socket编程实践: UDP服务器和客户端实现</a> 中评论</div><div class="ds-excerpt">还可以用listenpacket</div></li></ul>
		<script type="text/javascript">
		var duoshuoQuery = {short_name:"colobu"};
		(function() {
			var ds = document.createElement('script');
			ds.type = 'text/javascript';ds.async = true;
			ds.src = 'http://static.duoshuo.com/embed.js';
			ds.charset = 'UTF-8';
			(document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(ds);
		})();
		</script>
    </div>
  </div>

  
</aside>
        
      </div>
      <footer id="footer">
  
  <div class="outer">
    <div id="footer-info" class="inner">
      © 2016 smallnest<br>
	  Powered by <a href="http://hexo.io/" target="_blank">Hexo</a>
    </div>
  </div>
</footer>
    </div>
    <nav id="mobile-nav">
  
    <a href="http://colobu.com/" class="mobile-nav-link">首页</a>
  
    <a href="http://uridb.com/" class="mobile-nav-link">技术流</a>
  
    <a href="http://colobu.com/archives" class="mobile-nav-link">归档</a>
  
    <a href="https://github.com/smallnest" class="mobile-nav-link">github</a>
  
    <a href="http://colobu.com/techreview" class="mobile-nav-link">技术快报</a>
  
    <a href="http://colobu.com/about" class="mobile-nav-link">关于</a>
  
</nav>
    
<script src="./Kafka和Spring集成实践   鸟窝_files/jquery.min.js"></script>
<script src="./Kafka和Spring集成实践   鸟窝_files/jquery.lazyload.min.js"></script>

<script src="./Kafka和Spring集成实践   鸟窝_files/jquery.fancybox.pack.js"></script>


<script src="./Kafka和Spring集成实践   鸟窝_files/script.js" type="text/javascript"></script>

<!-- mathjax config similar to math.stackexchange -->
<script type="text/x-mathjax-config;executed=true">
  MathJax.Hub.Config({
    tex2jax: {
      inlineMath: [ ['$','$'], ["\\(","\\)"] ],
      processEscapes: true,
      skipTags: ['script', 'noscript', 'style', 'textarea', 'pre', 'code']
    }
  });
  MathJax.Hub.Queue(function() {
      var all = MathJax.Hub.getAllJax(), i;
      for(i=0; i < all.length; i += 1) {
        all[i].SourceElement().parentNode.className += ' has-jax';
      }
  });
</script>
<script type="text/javascript" src="./Kafka和Spring集成实践   鸟窝_files/MathJax.js">
</script>

<div id="totop" style="position: fixed; bottom: 150px; right: 10px; cursor: pointer; z-index: 2000; display: block; opacity: 1;">
	<a title="返回顶部"><img src="./Kafka和Spring集成实践   鸟窝_files/scrollup.png"></a>
</div>
<script src="./Kafka和Spring集成实践   鸟窝_files/totop.js" type="text/javascript"></script>




<script>
var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "//hm.baidu.com/hm.js?e085d87993250aab11f3e0c15f1c2785";
  var s = document.getElementsByTagName("script")[0]; 
  s.parentNode.insertBefore(hm, s);
})();
</script>


  </div>

</body></html>